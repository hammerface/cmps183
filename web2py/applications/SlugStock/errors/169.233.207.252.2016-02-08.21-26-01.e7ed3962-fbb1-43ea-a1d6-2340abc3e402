(dp1
S'output'
p2
S"<class 'sqlite3.OperationalError'> no such table: scheduler_task"
p3
sS'layer'
p4
S'/home/SlugStock/web2py/applications/SlugStock/controllers/appadmin.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n# ##########################################################\n# ## make sure administrator is on localhost\n# ###########################################################\n\nimport os\nimport socket\nimport datetime\nimport copy\nimport gluon.contenttype\nimport gluon.fileutils\n\ntry:\n    import pygraphviz as pgv\nexcept ImportError:\n    pgv = None\n\nis_gae = request.env.web2py_runtime_gae or False\n\n# ## critical --- make a copy of the environment\n\nglobal_env = copy.copy(globals())\nglobal_env[\'datetime\'] = datetime\n\nhttp_host = request.env.http_host.split(\':\')[0]\nremote_addr = request.env.remote_addr\ntry:\n    hosts = (http_host, socket.gethostname(),\n             socket.gethostbyname(http_host),\n             \'::1\', \'127.0.0.1\', \'::ffff:127.0.0.1\')\nexcept:\n    hosts = (http_host, )\n\nif request.is_https:\n    session.secure()\nelif (remote_addr not in hosts) and (remote_addr != "127.0.0.1") and \\\n    (request.function != \'manage\'):\n    raise HTTP(200, T(\'appadmin is disabled because insecure channel\'))\n\nif request.function == \'manage\':\n    if not \'auth\' in globals() or not request.args:\n        redirect(URL(request.controller, \'index\'))\n    manager_action = auth.settings.manager_actions.get(request.args(0), None)\n    if manager_action is None and request.args(0) == \'auth\':\n        manager_action = dict(role=auth.settings.auth_manager_role,\n                              heading=T(\'Manage Access Control\'),\n                              tables=[auth.table_user(),\n                                      auth.table_group(),\n                                      auth.table_permission()])\n    manager_role = manager_action.get(\'role\', None) if manager_action else None\n    if not (gluon.fileutils.check_credentials(request) or auth.has_membership(manager_role)):\n        raise HTTP(403, "Not authorized")\n    menu = False\nelif (request.application == \'admin\' and not session.authorized) or \\\n        (request.application != \'admin\' and not gluon.fileutils.check_credentials(request)):\n    redirect(URL(\'admin\', \'default\', \'index\',\n                 vars=dict(send=URL(args=request.args, vars=request.vars))))\nelse:\n    response.subtitle = T(\'Database Administration (appadmin)\')\n    menu = True\n\nignore_rw = True\nresponse.view = \'appadmin.html\'\nif menu:\n    response.menu = [[T(\'design\'), False, URL(\'admin\', \'default\', \'design\',\n                 args=[request.application])], [T(\'db\'), False,\n                 URL(\'index\')], [T(\'state\'), False,\n                 URL(\'state\')], [T(\'cache\'), False,\n                 URL(\'ccache\')]]\n\n# ##########################################################\n# ## auxiliary functions\n# ###########################################################\n\nif False and request.tickets_db:\n    from gluon.restricted import TicketStorage\n    ts = TicketStorage()\n    ts._get_table(request.tickets_db, ts.tablename, request.application)\n\ndef get_databases(request):\n    dbs = {}\n    for (key, value) in global_env.items():\n        try:\n            cond = isinstance(value, GQLDB)\n        except:\n            cond = isinstance(value, SQLDB)\n        if cond:\n            dbs[key] = value\n    return dbs\n\ndatabases = get_databases(None)\n\ndef eval_in_global_env(text):\n    exec (\'_ret=%s\' % text, {}, global_env)\n    return global_env[\'_ret\']\n\n\ndef get_database(request):\n    if request.args and request.args[0] in databases:\n        return eval_in_global_env(request.args[0])\n    else:\n        session.flash = T(\'invalid request\')\n        redirect(URL(\'index\'))\n\ndef get_table(request):\n    db = get_database(request)\n    if len(request.args) > 1 and request.args[1] in db.tables:\n        return (db, request.args[1])\n    else:\n        session.flash = T(\'invalid request\')\n        redirect(URL(\'index\'))\n\n\ndef get_query(request):\n    try:\n        return eval_in_global_env(request.vars.query)\n    except Exception:\n        return None\n\n\ndef query_by_table_type(tablename, db, request=request):\n    keyed = hasattr(db[tablename], \'_primarykey\')\n    if keyed:\n        firstkey = db[tablename][db[tablename]._primarykey[0]]\n        cond = \'>0\'\n        if firstkey.type in [\'string\', \'text\']:\n            cond = \'!=""\'\n        qry = \'%s.%s.%s%s\' % (\n            request.args[0], request.args[1], firstkey.name, cond)\n    else:\n        qry = \'%s.%s.id>0\' % tuple(request.args[:2])\n    return qry\n\n\n# ##########################################################\n# ## list all databases and tables\n# ###########################################################\ndef index():\n    return dict(databases=databases)\n\n\n# ##########################################################\n# ## insert a new record\n# ###########################################################\n\n\ndef insert():\n    (db, table) = get_table(request)\n    form = SQLFORM(db[table], ignore_rw=ignore_rw)\n    if form.accepts(request.vars, session):\n        response.flash = T(\'new record inserted\')\n    return dict(form=form, table=db[table])\n\n\n# ##########################################################\n# ## list all records in table and insert new record\n# ###########################################################\n\n\ndef download():\n    import os\n    db = get_database(request)\n    return response.download(request, db)\n\n\ndef csv():\n    import gluon.contenttype\n    response.headers[\'Content-Type\'] = \\\n        gluon.contenttype.contenttype(\'.csv\')\n    db = get_database(request)\n    query = get_query(request)\n    if not query:\n        return None\n    response.headers[\'Content-disposition\'] = \'attachment; filename=%s_%s.csv\'\\\n        % tuple(request.vars.query.split(\'.\')[:2])\n    return str(db(query, ignore_common_filters=True).select())\n\n\ndef import_csv(table, file):\n    table.import_from_csv_file(file)\n\n\ndef select():\n    import re\n    db = get_database(request)\n    dbname = request.args[0]\n    try:\n        is_imap = db._uri.startswith("imap://")\n    except (KeyError, AttributeError, TypeError):\n        is_imap = False\n    regex = re.compile(\'(?P<table>\\w+)\\.(?P<field>\\w+)=(?P<value>\\d+)\')\n    if len(request.args) > 1 and hasattr(db[request.args[1]], \'_primarykey\'):\n        regex = re.compile(\'(?P<table>\\w+)\\.(?P<field>\\w+)=(?P<value>.+)\')\n    if request.vars.query:\n        match = regex.match(request.vars.query)\n        if match:\n            request.vars.query = \'%s.%s.%s==%s\' % (request.args[0],\n                                                   match.group(\'table\'), match.group(\'field\'),\n                                                   match.group(\'value\'))\n    else:\n        request.vars.query = session.last_query\n    query = get_query(request)\n    if request.vars.start:\n        start = int(request.vars.start)\n    else:\n        start = 0\n    nrows = 0\n\n    step = 100\n    fields = []\n\n    if is_imap:\n        step = 3\n \n    stop = start + step\n\n    table = None\n    rows = []\n    orderby = request.vars.orderby\n    if orderby:\n        orderby = dbname + \'.\' + orderby\n        if orderby == session.last_orderby:\n            if orderby[0] == \'~\':\n                orderby = orderby[1:]\n            else:\n                orderby = \'~\' + orderby\n    session.last_orderby = orderby\n    session.last_query = request.vars.query\n    form = FORM(TABLE(TR(T(\'Query:\'), \'\', INPUT(_style=\'width:400px\',\n                _name=\'query\', _value=request.vars.query or \'\',\n                requires=IS_NOT_EMPTY(\n                    error_message=T("Cannot be empty")))), TR(T(\'Update:\'),\n                INPUT(_name=\'update_check\', _type=\'checkbox\',\n                value=False), INPUT(_style=\'width:400px\',\n                _name=\'update_fields\', _value=request.vars.update_fields\n                                    or \'\')), TR(T(\'Delete:\'), INPUT(_name=\'delete_check\',\n                _class=\'delete\', _type=\'checkbox\', value=False), \'\'),\n                TR(\'\', \'\', INPUT(_type=\'submit\', _value=T(\'submit\')))),\n                _action=URL(r=request, args=request.args))\n\n    tb = None\n    if form.accepts(request.vars, formname=None):\n        regex = re.compile(request.args[0] + \'\\.(?P<table>\\w+)\\..+\')\n        match = regex.match(form.vars.query.strip())\n        if match:\n            table = match.group(\'table\')\n        try:\n            nrows = db(query, ignore_common_filters=True).count()\n            if form.vars.update_check and form.vars.update_fields:\n                db(query, ignore_common_filters=True).update(\n                    **eval_in_global_env(\'dict(%s)\' % form.vars.update_fields))\n                response.flash = T(\'%s %%{row} updated\', nrows)\n            elif form.vars.delete_check:\n                db(query, ignore_common_filters=True).delete()\n                response.flash = T(\'%s %%{row} deleted\', nrows)\n            nrows = db(query, ignore_common_filters=True).count()\n\n            if is_imap:\n                fields = [db[table][name] for name in\n                    ("id", "uid", "created", "to",\n                     "sender", "subject")]\n            if orderby:\n                rows = db(query, ignore_common_filters=True).select(\n                              *fields, limitby=(start, stop),\n                              orderby=eval_in_global_env(orderby))\n            else:\n                rows = db(query, ignore_common_filters=True).select(\n                    *fields, limitby=(start, stop))\n        except Exception, e:\n            import traceback\n            tb = traceback.format_exc()\n            (rows, nrows) = ([], 0)\n            response.flash = DIV(T(\'Invalid Query\'), PRE(str(e)))\n    # begin handle upload csv\n    csv_table = table or request.vars.table\n    if csv_table:\n        formcsv = FORM(str(T(\'or import from csv file\')) + " ",\n                       INPUT(_type=\'file\', _name=\'csvfile\'),\n                       INPUT(_type=\'hidden\', _value=csv_table, _name=\'table\'),\n                       INPUT(_type=\'submit\', _value=T(\'import\')))\n    else:\n        formcsv = None\n    if formcsv and formcsv.process().accepted:\n        try:\n            import_csv(db[request.vars.table],\n                       request.vars.csvfile.file)\n            response.flash = T(\'data uploaded\')\n        except Exception, e:\n            response.flash = DIV(T(\'unable to parse csv file\'), PRE(str(e)))\n    # end handle upload csv\n\n    return dict(\n        form=form,\n        table=table,\n        start=start,\n        stop=stop,\n        step=step,\n        nrows=nrows,\n        rows=rows,\n        query=request.vars.query,\n        formcsv=formcsv,\n        tb=tb\n    )\n\n\n# ##########################################################\n# ## edit delete one record\n# ###########################################################\n\n\ndef update():\n    (db, table) = get_table(request)\n    keyed = hasattr(db[table], \'_primarykey\')\n    record = None\n    db[table]._common_filter = None\n    if keyed:\n        key = [f for f in request.vars if f in db[table]._primarykey]\n        if key:\n            record = db(db[table][key[0]] == request.vars[key[\n                        0]]).select().first()\n    else:\n        record = db(db[table].id == request.args(\n            2)).select().first()\n\n    if not record:\n        qry = query_by_table_type(table, db)\n        session.flash = T(\'record does not exist\')\n        redirect(URL(\'select\', args=request.args[:1],\n                     vars=dict(query=qry)))\n\n    if keyed:\n        for k in db[table]._primarykey:\n            db[table][k].writable = False\n\n    form = SQLFORM(\n        db[table], record, deletable=True, delete_label=T(\'Check to delete\'),\n        ignore_rw=ignore_rw and not keyed,\n        linkto=URL(\'select\',\n                   args=request.args[:1]), upload=URL(r=request,\n                                                      f=\'download\', args=request.args[:1]))\n\n    if form.accepts(request.vars, session):\n        session.flash = T(\'done!\')\n        qry = query_by_table_type(table, db)\n        redirect(URL(\'select\', args=request.args[:1],\n                 vars=dict(query=qry)))\n    return dict(form=form, table=db[table])\n\n\n# ##########################################################\n# ## get global variables\n# ###########################################################\n\n\ndef state():\n    return dict()\n\n\ndef ccache():\n    if is_gae:\n        form = FORM(\n            P(TAG.BUTTON(T("Clear CACHE?"), _type="submit", _name="yes", _value="yes")))\n    else:\n        cache.ram.initialize()\n        cache.disk.initialize()\n\n        form = FORM(\n            P(TAG.BUTTON(\n                T("Clear CACHE?"), _type="submit", _name="yes", _value="yes")),\n            P(TAG.BUTTON(\n                T("Clear RAM"), _type="submit", _name="ram", _value="ram")),\n            P(TAG.BUTTON(\n                T("Clear DISK"), _type="submit", _name="disk", _value="disk")),\n        )\n\n    if form.accepts(request.vars, session):\n        session.flash = ""\n        if is_gae:\n            if request.vars.yes:\n                cache.ram.clear()\n                session.flash += T("Cache Cleared")\n        else:\n            clear_ram = False\n            clear_disk = False\n            if request.vars.yes:\n                clear_ram = clear_disk = True\n            if request.vars.ram:\n                clear_ram = True\n            if request.vars.disk:\n                clear_disk = True\n            if clear_ram:\n                cache.ram.clear()\n                session.flash += T("Ram Cleared")\n            if clear_disk:\n                cache.disk.clear()\n                session.flash += T("Disk Cleared")\n        redirect(URL(r=request))\n\n    try:\n        from guppy import hpy\n        hp = hpy()\n    except ImportError:\n        hp = False\n\n    import shelve\n    import os\n    import copy\n    import time\n    import math\n    from gluon import portalocker\n\n    ram = {\n        \'entries\': 0,\n        \'bytes\': 0,\n        \'objects\': 0,\n        \'hits\': 0,\n        \'misses\': 0,\n        \'ratio\': 0,\n        \'oldest\': time.time(),\n        \'keys\': []\n    }\n    \n    disk = copy.copy(ram)\n    total = copy.copy(ram)\n    disk[\'keys\'] = []\n    total[\'keys\'] = []\n\n    def GetInHMS(seconds):\n        hours = math.floor(seconds / 3600)\n        seconds -= hours * 3600\n        minutes = math.floor(seconds / 60)\n        seconds -= minutes * 60\n        seconds = math.floor(seconds)\n\n        return (hours, minutes, seconds)\n\n    if is_gae:\n        gae_stats = cache.ram.client.get_stats()\n        try:\n            gae_stats[\'ratio\'] = ((gae_stats[\'hits\'] * 100) /\n                (gae_stats[\'hits\'] + gae_stats[\'misses\']))\n        except ZeroDivisionError:\n            gae_stats[\'ratio\'] = T("?")\n        gae_stats[\'oldest\'] = GetInHMS(time.time() - gae_stats[\'oldest_item_age\'])\n        total.update(gae_stats)\n    else:\n        # get ram stats directly from the cache object\n        ram_stats = cache.ram.stats[request.application]\n        ram[\'hits\'] = ram_stats[\'hit_total\'] - ram_stats[\'misses\']\n        ram[\'misses\'] = ram_stats[\'misses\']\n        try:\n            ram[\'ratio\'] = ram[\'hits\'] * 100 / ram_stats[\'hit_total\']\n        except (KeyError, ZeroDivisionError):\n            ram[\'ratio\'] = 0\n\n        for key, value in cache.ram.storage.iteritems():\n            if hp:\n                ram[\'bytes\'] += hp.iso(value[1]).size\n                ram[\'objects\'] += hp.iso(value[1]).count\n            ram[\'entries\'] += 1\n            if value[0] < ram[\'oldest\']:\n                ram[\'oldest\'] = value[0]\n            ram[\'keys\'].append((key, GetInHMS(time.time() - value[0])))\n\n        for key in cache.disk.storage:\n            value = cache.disk.storage[key]\n            if isinstance(value[1], dict):\n                disk[\'hits\'] = value[1][\'hit_total\'] - value[1][\'misses\']\n                disk[\'misses\'] = value[1][\'misses\']\n                try:\n                    disk[\'ratio\'] = disk[\'hits\'] * 100 / value[1][\'hit_total\']\n                except (KeyError, ZeroDivisionError):\n                    disk[\'ratio\'] = 0\n            else:\n                if hp:\n                    disk[\'bytes\'] += hp.iso(value[1]).size\n                    disk[\'objects\'] += hp.iso(value[1]).count\n                disk[\'entries\'] += 1\n                if value[0] < disk[\'oldest\']:\n                    disk[\'oldest\'] = value[0]\n                disk[\'keys\'].append((key, GetInHMS(time.time() - value[0])))\n\n        ram_keys = ram.keys() # [\'hits\', \'objects\', \'ratio\', \'entries\', \'keys\', \'oldest\', \'bytes\', \'misses\']\n        ram_keys.remove(\'ratio\')\n        ram_keys.remove(\'oldest\')\n        for key in ram_keys:\n            total[key] = ram[key] + disk[key]\n\n        try:\n            total[\'ratio\'] = total[\'hits\'] * 100 / (total[\'hits\'] +\n                                                total[\'misses\'])\n        except (KeyError, ZeroDivisionError):\n            total[\'ratio\'] = 0\n\n        if disk[\'oldest\'] < ram[\'oldest\']:\n            total[\'oldest\'] = disk[\'oldest\']\n        else:\n            total[\'oldest\'] = ram[\'oldest\']\n\n        ram[\'oldest\'] = GetInHMS(time.time() - ram[\'oldest\'])\n        disk[\'oldest\'] = GetInHMS(time.time() - disk[\'oldest\'])\n        total[\'oldest\'] = GetInHMS(time.time() - total[\'oldest\'])\n\n    def key_table(keys):\n        return TABLE(\n            TR(TD(B(T(\'Key\'))), TD(B(T(\'Time in Cache (h:m:s)\')))),\n            *[TR(TD(k[0]), TD(\'%02d:%02d:%02d\' % k[1])) for k in keys],\n            **dict(_class=\'cache-keys\',\n                   _style="border-collapse: separate; border-spacing: .5em;"))\n\n    if not is_gae:\n        ram[\'keys\'] = key_table(ram[\'keys\'])\n        disk[\'keys\'] = key_table(disk[\'keys\'])\n        total[\'keys\'] = key_table(total[\'keys\'])\n\n    return dict(form=form, total=total,\n                ram=ram, disk=disk, object_stats=hp != False)\n\n\ndef table_template(table):\n    from gluon.html import TR, TD, TABLE, TAG\n\n    def FONT(*args, **kwargs):\n        return TAG.font(*args, **kwargs)\n\n    def types(field):\n        f_type = field.type\n        if not isinstance(f_type,str):\n            return \' \'\n        elif f_type == \'string\':\n            return field.length\n        elif f_type == \'id\':\n            return B(\'pk\')\n        elif f_type.startswith(\'reference\') or \\\n                f_type.startswith(\'list:reference\'):\n            return B(\'fk\')\n        else:\n            return \' \'\n\n    # This is horribe HTML but the only one graphiz understands\n    rows = []\n    cellpadding = 4\n    color = "#000000"\n    bgcolor = "#FFFFFF"\n    face = "Helvetica"\n    face_bold = "Helvetica Bold"\n    border = 0\n\n    rows.append(TR(TD(FONT(table, _face=face_bold, _color=bgcolor),\n                           _colspan=3, _cellpadding=cellpadding,\n                           _align="center", _bgcolor=color)))\n    for row in db[table]:\n        rows.append(TR(TD(FONT(row.name, _color=color, _face=face_bold),\n                              _align="left", _cellpadding=cellpadding,\n                              _border=border),\n                       TD(FONT(row.type, _color=color, _face=face),\n                               _align="left", _cellpadding=cellpadding,\n                               _border=border),\n                       TD(FONT(types(row), _color=color, _face=face),\n                               _align="center", _cellpadding=cellpadding,\n                               _border=border)))\n    return "< %s >" % TABLE(*rows, **dict(_bgcolor=bgcolor, _border=1,\n                                          _cellborder=0, _cellspacing=0)\n                             ).xml()\n\n\ndef bg_graph_model():\n    graph = pgv.AGraph(layout=\'dot\',  directed=True,  strict=False,  rankdir=\'LR\')\n\n    subgraphs = dict()\n    for tablename in db.tables:\n        if hasattr(db[tablename],\'_meta_graphmodel\'):\n            meta_graphmodel = db[tablename]._meta_graphmodel\n        else:\n            meta_graphmodel = dict(group=request.application, color=\'#ECECEC\')\n\n        group = meta_graphmodel[\'group\'].replace(\' \', \'\')\n        if not subgraphs.has_key(group):\n            subgraphs[group] = dict(meta=meta_graphmodel, tables=[])\n        subgraphs[group][\'tables\'].append(tablename)\n\n        graph.add_node(tablename, name=tablename, shape=\'plaintext\',\n                       label=table_template(tablename))\n\n    for n, key in enumerate(subgraphs.iterkeys()):\n        graph.subgraph(nbunch=subgraphs[key][\'tables\'],\n                    name=\'cluster%d\' % n,\n                    style=\'filled\',\n                    color=subgraphs[key][\'meta\'][\'color\'],\n                    label=subgraphs[key][\'meta\'][\'group\'])\n\n    for tablename in db.tables:\n        for field in db[tablename]:\n            f_type = field.type\n            if isinstance(f_type,str) and (\n                f_type.startswith(\'reference\') or\n                f_type.startswith(\'list:reference\')):\n                referenced_table = f_type.split()[1].split(\'.\')[0]\n                n1 = graph.get_node(tablename)\n                n2 = graph.get_node(referenced_table)\n                graph.add_edge(n1, n2, color="#4C4C4C", label=\'\')\n\n    graph.layout()\n    if not request.args:\n        response.headers[\'Content-Type\'] = \'image/png\'\n        return graph.draw(format=\'png\', prog=\'dot\')\n    else:\n        response.headers[\'Content-Disposition\']=\'attachment;filename=graph.%s\'%request.args(0)\n        if request.args(0) == \'dot\':\n            return graph.string()\n        else:\n            return graph.draw(format=request.args(0), prog=\'dot\')\n\ndef graph_model():\n    return dict(databases=databases, pgv=pgv)\n\ndef manage():\n    tables = manager_action[\'tables\']\n    if isinstance(tables[0], str):\n        db = manager_action.get(\'db\', auth.db)\n        db = globals()[db] if isinstance(db, str) else db\n        tables = [db[table] for table in tables]\n    if request.args(0) == \'auth\':\n        auth.table_user()._plural = T(\'Users\')\n        auth.table_group()._plural = T(\'Roles\')\n        auth.table_membership()._plural = T(\'Memberships\')\n        auth.table_permission()._plural = T(\'Permissions\')\n    if request.extension != \'load\':\n        return dict(heading=manager_action.get(\'heading\',\n                    T(\'Manage %(action)s\') % dict(action=request.args(0).replace(\'_\', \' \').title())),\n                    tablenames=[table._tablename for table in tables],\n                    labels=[table._plural.title() for table in tables])\n\n    table = tables[request.args(1, cast=int)]\n    formname = \'%s_grid\' % table._tablename\n    linked_tables = orderby = None\n    if request.args(0) == \'auth\':\n        auth.table_group()._id.readable = \\\n        auth.table_membership()._id.readable = \\\n        auth.table_permission()._id.readable = False\n        auth.table_membership().user_id.label = T(\'User\')\n        auth.table_membership().group_id.label = T(\'Role\')\n        auth.table_permission().group_id.label = T(\'Role\')\n        auth.table_permission().name.label = T(\'Permission\')\n        if table == auth.table_user():\n            linked_tables=[auth.settings.table_membership_name]\n        elif table == auth.table_group():\n            orderby = \'role\' if not request.args(3) or \'.group_id\' not in request.args(3) else None\n        elif table == auth.table_permission():\n            orderby = \'group_id\'\n    kwargs = dict(user_signature=True, maxtextlength=1000,\n                  orderby=orderby, linked_tables=linked_tables)\n    smartgrid_args = manager_action.get(\'smartgrid_args\', {})\n    kwargs.update(**smartgrid_args.get(\'DEFAULT\', {}))\n    kwargs.update(**smartgrid_args.get(table._tablename, {}))\n    grid = SQLFORM.smartgrid(table, args=request.args[:2], formname=formname, **kwargs)\n    return grid\n\ndef hooks():\n    import functools\n    import inspect\n    list_op=[\'_%s_%s\' %(h,m) for h in [\'before\', \'after\'] for m in [\'insert\',\'update\',\'delete\']]\n    tables=[]\n    with_build_it=False\n    for db_str in sorted(databases):\n        db = databases[db_str]\n        for t in db.tables:\n            method_hooks=[]\n            for op in list_op:\n                functions = []\n                for f in getattr(db[t], op):\n                    if hasattr(f, \'__call__\'):\n                        try:\n                            if isinstance(f, (functools.partial)):\n                                f = f.func\n                            filename = inspect.getsourcefile(f)\n                            details = {\'funcname\':f.__name__,\n                                       \'filename\':filename[len(request.folder):] if request.folder in filename else None,\n                                       \'lineno\': inspect.getsourcelines(f)[1]}\n                            if details[\'filename\']: # Built in functions as delete_uploaded_files are not editable\n                                details[\'url\'] = URL(a=\'admin\',c=\'default\',f=\'edit\', args=[request[\'application\'], details[\'filename\']],vars={\'lineno\':details[\'lineno\']})\n                            if details[\'filename\'] or with_build_it:\n                                functions.append(details)\n                        # compiled app and windows build don\'t support code inspection\n                        except:\n                            pass\n                if len(functions):\n                    method_hooks.append({\'name\':op, \'functions\':functions})\n            if len(method_hooks):\n                tables.append({\'name\':"%s.%s" % (db_str,t), \'slug\': IS_SLUG()("%s.%s" % (db_str,t))[0], \'method_hooks\':method_hooks})\n    # Render\n    ul_main = UL(_class=\'nav nav-list\')\n    for t in tables:\n        ul_main.append(A(t[\'name\'], _onclick="collapse(\'a_%s\')" % t[\'slug\']))\n        ul_t = UL(_class=\'nav nav-list\', _id="a_%s" % t[\'slug\'], _style=\'display:none\')\n        for op in t[\'method_hooks\']:\n            ul_t.append(LI (op[\'name\']))\n            ul_t.append(UL([LI(A(f[\'funcname\'], _class="editor_filelink", _href=f[\'url\']if \'url\' in f else None, **{\'_data-lineno\':f[\'lineno\']-1})) for f in op[\'functions\']]))\n        ul_main.append(ul_t)\n    return ul_main\n\nresponse._vars=response._caller(insert)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__module__'
p12
S"'sqlite3'"
p13
sS'__getslice__'
p14
S"<method-wrapper '__getslice__' of OperationalError object>"
p15
sS'__str__'
p16
S"<method-wrapper '__str__' of OperationalError object>"
p17
sS'__reduce__'
p18
S'<built-in method __reduce__ of OperationalError object>'
p19
sS'__dict__'
p20
S'{}'
p21
sS'__sizeof__'
p22
S'<built-in method __sizeof__ of OperationalError object>'
p23
sS'__weakref__'
p24
S'None'
p25
sS'__init__'
p26
S"<method-wrapper '__init__' of OperationalError object>"
p27
sS'__setattr__'
p28
S"<method-wrapper '__setattr__' of OperationalError object>"
p29
sS'__reduce_ex__'
p30
S'<built-in method __reduce_ex__ of OperationalError object>'
p31
sS'__new__'
p32
S'<built-in method __new__ of type object>'
p33
sS'__format__'
p34
S'<built-in method __format__ of OperationalError object>'
p35
sS'__class__'
p36
S"<class 'sqlite3.OperationalError'>"
p37
sS'__doc__'
p38
S'None'
p39
sS'__getitem__'
p40
S"<method-wrapper '__getitem__' of OperationalError object>"
p41
sS'__setstate__'
p42
S'<built-in method __setstate__ of OperationalError object>'
p43
sS'__getattribute__'
p44
S"<method-wrapper '__getattribute__' of OperationalError object>"
p45
sS'args'
p46
S"('no such table: scheduler_task',)"
p47
sS'__subclasshook__'
p48
S'<built-in method __subclasshook__ of type object>'
p49
sS'__unicode__'
p50
S'<built-in method __unicode__ of OperationalError object>'
p51
sS'__delattr__'
p52
S"<method-wrapper '__delattr__' of OperationalError object>"
p53
sS'__repr__'
p54
S"<method-wrapper '__repr__' of OperationalError object>"
p55
sS'__hash__'
p56
S"<method-wrapper '__hash__' of OperationalError object>"
p57
ssS'evalue'
p58
S'no such table: scheduler_task'
p59
sS'request'
p60
cgluon.html
XML_unpickle
p61
(S'sS\\\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">ajax</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">application</td><td style="vertical-align:top;">:</td><td><div>SlugStock</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">args</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>db</div></td></tr><tr><td><div>scheduler_run</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cid</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">client</td><td style="vertical-align:top;">:</td><td><div>169.233.207.252</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">controller</td><td style="vertical-align:top;">:</td><td><div>appadmin</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_admin</td><td style="vertical-align:top;">:</td><td><div>169.233.207.252-2354f146-e352-4a71-abb2-c1b26d283e4a<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_slugstock</td><td style="vertical-align:top;">:</td><td><div>169.233.207.252-9ca37525-a3db-44d3-8f15-35612ea2e0b6<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_slugstockcurrent</td><td style="vertical-align:top;">:</td><td><div>169.233.207.252-4b789e59-aae6-4cf1-a67b-afb7173a51f5<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_welcome</td><td style="vertical-align:top;">:</td><td><div>169.233.207.252-57ea73d9-c7b3-48d8-962c-13cacc2e59cf<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">env</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">CONTENT_LENGTH</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">CONTENT_TYPE</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">DOCUMENT_ROOT</td><td style="vertical-align:top;">:</td><td><div>/usr/local/openresty/nginx/html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTPS</td><td style="vertical-align:top;">:</td><td><div>on</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT</td><td style="vertical-align:top;">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_ENCODING</td><td style="vertical-align:top;">:</td><td><div>gzip, deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_LANGUAGE</td><td style="vertical-align:top;">:</td><td><div>en-US,en;q=0.5</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONNECTION</td><td style="vertical-align:top;">:</td><td><div>close</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_COOKIE</td><td style="vertical-align:top;">:</td><td><div>_ga=GA1.2.1168300973.1452644018; session_id_welcome=169.233.207.252-57ea73d9-c7b3-48d8-962c-13cacc2e59cf; session_id_admin=169.233.207.252-2354f146-e352-4a71-abb2-c1b26d283e4a; session_id_slugstock=169.233.207.252-9ca37525-a3db-44d3-8f15-35612ea2e0b6; session_id_slugstockcurrent=169.233.207.252-4b789e59-aae6-4cf1-a67b-afb7173a51f5; _gat=1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_HOST</td><td style="vertical-align:top;">:</td><td><div>slugstock.pythonanywhere.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_REFERER</td><td style="vertical-align:top;">:</td><td><div>https://slugstock.pythonanywhere.com/SlugStock/appadmin/index</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_USER_AGENT</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (Windows NT 6.3; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_X_FORWARDED_FOR</td><td style="vertical-align:top;">:</td><td><div>169.233.207.252</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_X_REAL_IP</td><td style="vertical-align:top;">:</td><td><div>169.233.207.252</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">PATH_INFO</td><td style="vertical-align:top;">:</td><td><div>/SlugStock/appadmin/insert/db/scheduler_run</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">QUERY_STRING</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_ADDR</td><td style="vertical-align:top;">:</td><td><div>10.169.229.133</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_PORT</td><td style="vertical-align:top;">:</td><td><div>47808</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REQUEST_METHOD</td><td style="vertical-align:top;">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REQUEST_URI</td><td style="vertical-align:top;">:</td><td><div>/SlugStock/appadmin/insert/db/scheduler_run</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SCRIPT_NAME</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_NAME</td><td style="vertical-align:top;">:</td><td><div>slugstock.pythonanywhere.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PORT</td><td style="vertical-align:top;">:</td><td><div>443</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PROTOCOL</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;/home/SlugStock/web2py/applications/welcome/&#x27;, &#x27;/home/SlugStock/web2py/applications/SlugStock/&#x27;, &#x27;/home/SlugStock/web2py/applications/admin/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>/home/SlugStock/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">content_length</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">content_type</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">document_root</td><td style="vertical-align:top;">:</td><td><div>/usr/local/openresty/nginx/html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>/home/SlugStock/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept</td><td style="vertical-align:top;">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_encoding</td><td style="vertical-align:top;">:</td><td><div>gzip, deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_language</td><td style="vertical-align:top;">:</td><td><div>en-US,en;q=0.5</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_connection</td><td style="vertical-align:top;">:</td><td><div>close</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_cookie</td><td style="vertical-align:top;">:</td><td><div>_ga=GA1.2.1168300973.1452644018; session_id_welcome=169.233.207.252-57ea73d9-c7b3-48d8-962c-13cacc2e59cf; session_id_admin=169.233.207.252-2354f146-e352-4a71-abb2-c1b26d283e4a; session_id_slugstock=169.233.207.252-9ca37525-a3db-44d3-8f15-35612ea2e0b6; session_id_slugstockcurrent=169.233.207.252-4b789e59-aae6-4cf1-a67b-afb7173a51f5; _gat=1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_host</td><td style="vertical-align:top;">:</td><td><div>slugstock.pythonanywhere.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_referer</td><td style="vertical-align:top;">:</td><td><div>https://slugstock.pythonanywhere.com/SlugStock/appadmin/index</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_user_agent</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (Windows NT 6.3; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_x_forwarded_for</td><td style="vertical-align:top;">:</td><td><div>169.233.207.252</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_x_real_ip</td><td style="vertical-align:top;">:</td><td><div>169.233.207.252</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">https</td><td style="vertical-align:top;">:</td><td><div>on</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>slugstock.pythonanywhere.com</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>giles-liveweb4</div></td></tr><tr><td><div>50.19.109.98</div></td></tr><tr><td><div>127.0.0.1</div></td></tr><tr><td><div>localhost</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path_info</td><td style="vertical-align:top;">:</td><td><div>/SlugStock/appadmin/insert/db/scheduler_run</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">query_string</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_addr</td><td style="vertical-align:top;">:</td><td><div>10.169.229.133</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_port</td><td style="vertical-align:top;">:</td><td><div>47808</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_method</td><td style="vertical-align:top;">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_uri</td><td style="vertical-align:top;">:</td><td><div>/SlugStock/appadmin/insert/db/scheduler_run</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">script_name</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_name</td><td style="vertical-align:top;">:</td><td><div>slugstock.pythonanywhere.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_port</td><td style="vertical-align:top;">:</td><td><div>443</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_protocol</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi.node</td><td style="vertical-align:top;">:</td><td><div>giles-liveweb4</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi.version</td><td style="vertical-align:top;">:</td><td><div>2.0.5.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi_node</td><td style="vertical-align:top;">:</td><td><div>giles-liveweb4</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi_version</td><td style="vertical-align:top;">:</td><td><div>2.0.5.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_path</td><td style="vertical-align:top;">:</td><td><div>/home/SlugStock/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.12.3-stable+timestamp.2015.08.19.00.18.03</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.errors</td><td style="vertical-align:top;">:</td><td><div>&lt;uwsgi_file__bin_user_wsgi_wrapper.ErrorLogFile object at 0x7f62b0cd4090&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;built-in function uwsgi_sendfile&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.input</td><td style="vertical-align:top;">:</td><td><div>&lt;uwsgi._Input object at 0x7f62bb041cd8&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multiprocess</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multithread</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.url_scheme</td><td style="vertical-align:top;">:</td><td><div>https</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_errors</td><td style="vertical-align:top;">:</td><td><div>&lt;uwsgi_file__bin_user_wsgi_wrapper.ErrorLogFile object at 0x7f62b0cd4090&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;built-in function uwsgi_sendfile&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_input</td><td style="vertical-align:top;">:</td><td><div>&lt;uwsgi._Input object at 0x7f62bb041cd8&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multiprocess</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multithread</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_url_scheme</td><td style="vertical-align:top;">:</td><td><div>https</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">extension</td><td style="vertical-align:top;">:</td><td><div>html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">folder</td><td style="vertical-align:top;">:</td><td><div>/home/SlugStock/web2py/applications/SlugStock/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">function</td><td style="vertical-align:top;">:</td><td><div>insert</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">global_settings</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;/home/SlugStock/web2py/applications/welcome/&#x27;, &#x27;/home/SlugStock/web2py/applications/SlugStock/&#x27;, &#x27;/home/SlugStock/web2py/applications/admin/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>/home/SlugStock/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>/home/SlugStock/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>slugstock.pythonanywhere.com</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>giles-liveweb4</div></td></tr><tr><td><div>50.19.109.98</div></td></tr><tr><td><div>127.0.0.1</div></td></tr><tr><td><div>localhost</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.12.3-stable+timestamp.2015.08.19.00.18.03</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_https</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_local</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_restful</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_sheduler</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_shell</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">now</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2016, 2, 8, 21, 26, 1, 413459)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_args</td><td style="vertical-align:top;">:</td><td><div>db/scheduler_run</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_extension</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">url</td><td style="vertical-align:top;">:</td><td><div>/SlugStock/appadmin/insert/db/scheduler_run</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">utcnow</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2016, 2, 8, 21, 26, 1, 413473)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi</td><td style="vertical-align:top;">:</td><td><div>&lt;gluon.main.LazyWSGI object at 0x7f6296c98f50&gt;</div></td></tr></table></div>'
tRp62
sS'frames'
p63
(lp64
(dp65
S'file'
p66
S'/home/SlugStock/web2py/gluon/restricted.py'
p67
sS'dump'
p68
(dp69
S'environment'
p70
S"{'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ASSIGNJS': <function ASSIGNJS>, 'AppConfig': <function AppConfig>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, ...}"
p71
sS'ccode'
p72
S'<code object <module> at 0x7f6296cd70b0, file "/...tions/SlugStock/controllers/appadmin.py", line 7>'
p73
ssS'lnum'
p74
I227
sS'lines'
p75
(dp76
I224
S'            ccode = code'
p77
sI225
S'        else:'
p78
sI226
S'            ccode = compile2(code, layer)'
p79
sI227
S'        exec ccode in environment'
p80
sI228
S'    except HTTP:'
p81
sI229
S'        raise'
p82
sI230
S'    except RestrictedError:'
p83
sI231
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p84
sI222
S'    try:'
p85
sI223
S'        if isinstance(code, types.CodeType):'
p86
ssS'call'
p87
S"(code='# -*- coding: utf-8 -*-\\n\\n# #####################...ul_main\\n\\nresponse._vars=response._caller(insert)\\n', environment={'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ASSIGNJS': <function ASSIGNJS>, 'AppConfig': <function AppConfig>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, ...}, layer='/home/SlugStock/web2py/applications/SlugStock/controllers/appadmin.py')"
p88
sS'func'
p89
S'restricted'
p90
sa(dp91
g66
S'/home/SlugStock/web2py/applications/SlugStock/controllers/appadmin.py'
p92
sg68
(dp93
sg74
I703
sg75
(dp94
I692
S'    # Render'
p95
sI693
S"    ul_main = UL(_class='nav nav-list')"
p96
sI694
S'    for t in tables:'
p97
sI695
S'        ul_main.append(A(t[\'name\'], _onclick="collapse(\'a_%s\')" % t[\'slug\']))'
p98
sI696
S'        ul_t = UL(_class=\'nav nav-list\', _id="a_%s" % t[\'slug\'], _style=\'display:none\')'
p99
sI697
S"        for op in t['method_hooks']:"
p100
sI698
S"            ul_t.append(LI (op['name']))"
p101
sI699
S'            ul_t.append(UL([LI(A(f[\'funcname\'], _class="editor_filelink", _href=f[\'url\']if \'url\' in f else None, **{\'_data-lineno\':f[\'lineno\']-1})) for f in op[\'functions\']]))'
p102
sI700
S'        ul_main.append(ul_t)'
p103
sI701
S'    return ul_main'
p104
ssg87
S'()'
p105
sg89
S'<module>'
p106
sa(dp107
g66
S'/home/SlugStock/web2py/gluon/globals.py'
p108
sg68
(dp109
S'self'
p110
S'undefined'
p111
sS'f'
S'<function insert>'
p112
ssg74
I412
sg75
(dp113
I416
S"        self.generic_patterns = ['*']"
p114
sI407
S"        self.flash = ''            # used by the default view layout"
p115
sI408
S'        self.meta = Storage()      # used by web2py_ajax.html'
p116
sI409
S'        self.menu = []             # used by the default view layout'
p117
sI410
S'        self.files = []            # used by web2py_ajax.html'
p118
sI411
S'        self._vars = None'
p119
sI412
S'        self._caller = lambda f: f()'
p120
sI413
S'        self._view_environment = None'
p121
sI414
S'        self._custom_commit = None'
p122
sI415
S'        self._custom_rollback = None'
p123
ssg87
S'(f=<function insert>)'
p124
sg89
S'<lambda>'
p125
sa(dp126
g66
S'/home/SlugStock/web2py/applications/SlugStock/controllers/appadmin.py'
p127
sg68
(dp128
S'global SQLFORM'
p129
S"<class 'gluon.sqlhtml.SQLFORM'>"
p130
sS'db'
p131
S'<DAL uri="sqlite://storage.sqlite">'
p132
sS'global ignore_rw'
p133
S'True'
p134
sS'form'
p135
g111
sS'table'
p136
S"'scheduler_run'"
p137
ssg74
I150
sg75
(dp138
I145
S'# ###########################################################'
p139
sI146
S''
sI147
S''
sI148
S'def insert():'
p140
sI149
S'    (db, table) = get_table(request)'
p141
sI150
S'    form = SQLFORM(db[table], ignore_rw=ignore_rw)'
p142
sI151
S'    if form.accepts(request.vars, session):'
p143
sI152
S"        response.flash = T('new record inserted')"
p144
sI153
S'    return dict(form=form, table=db[table])'
p145
sI154
S''
ssg87
S'()'
p146
sg89
S'insert'
p147
sa(dp148
g66
S'/home/SlugStock/web2py/gluon/sqlhtml.py'
p149
sg68
(dp150
S'default'
p151
S'None'
p152
sS'self.widgets.options.widget'
p153
S"<bound method type.widget of <class 'gluon.sqlhtml.OptionsWidget'>>"
p154
sS'self'
p155
S'<gluon.sqlhtml.SQLFORM object>'
p156
sS'inp'
p157
g111
sS'self.widgets'
p158
S"<Storage {'multiple': <class 'gluon.sqlhtml.Mult...ss 'gluon.sqlhtml.OptionsWidget'>, 'blob': None}>"
p159
sS'field'
p160
S'<pydal.objects.Field object>'
p161
sS'self.widgets.options'
p162
S"<class 'gluon.sqlhtml.OptionsWidget'>"
p163
ssg74
I1261
sg75
(dp164
I1256
S"                    inpval = 'checked'"
p165
sI1257
S'                else:'
p166
sI1258
S"                    inpval = ''"
p167
sI1259
S'            elif OptionsWidget.has_options(field):'
p168
sI1260
S'                if not field.requires.multiple:'
p169
sI1261
S'                    inp = self.widgets.options.widget(field, default)'
p170
sI1262
S'                else:'
p171
sI1263
S'                    inp = self.widgets.multiple.widget(field, default)'
p172
sI1264
S'                if fieldname in keepopts:'
p173
sI1265
S'                    inpval = CAT(*inp.components)'
p174
ssg87
S"(self=<gluon.sqlhtml.SQLFORM object>, table=<Table scheduler_run (id,task_id,status,start_ti...ime,run_output,run_result,traceback,worker_name)>, record=None, deletable=False, linkto=None, upload=None, fields=['id', 'task_id', 'status', 'start_time', 'stop_time', 'run_output', 'run_result', 'traceback', 'worker_name'], labels=None, col3={}, submit_button='Submit', delete_label='Check to delete', showid=True, readonly=False, comments=True, keepopts=[], ignore_rw=True, record_id=None, formstyle=None, buttons=['submit'], separator=None, extra_fields=[], **attributes={})"
p175
sg89
g26
sa(dp176
g66
S'/home/SlugStock/web2py/gluon/sqlhtml.py'
p177
sg68
(dp178
S'].options'
p179
g111
sS'requires'
p180
S'[<gluon.validators.IS_IN_DB object>]'
p181
sS'options'
p182
g111
ssg74
I313
sg75
(dp183
I308
S'        requires = field.requires'
p184
sI309
S'        if not isinstance(requires, (list, tuple)):'
p185
sI310
S'            requires = [requires]'
p186
sI311
S'        if requires:'
p187
sI312
S"            if hasattr(requires[0], 'options'):"
p188
sI313
S'                options = requires[0].options()'
p189
sI314
S'            else:'
p190
sI315
S'                raise SyntaxError('
p191
sI316
S"                    'widget cannot determine options of %s' % field)"
p192
sI317
S'        opts = [OPTION(v, _value=k) for (k, v) in options]'
p193
ssg87
S"(cls=<class 'gluon.sqlhtml.OptionsWidget'>, field=<pydal.objects.Field object>, value=None, **attributes={})"
p194
sg89
S'widget'
p195
sa(dp196
g66
S'/home/SlugStock/web2py/gluon/validators.py'
p197
sg68
(dp198
S'self'
p199
S'<gluon.validators.IS_IN_DB object>'
p200
sS'self.build_set'
p201
S'<bound method IS_IN_DB.build_set of <gluon.validators.IS_IN_DB object>>'
p202
ssg74
I586
sg75
(dp203
I581
S'            self.labels = [self.label % r for r in records]'
p204
sI582
S'        else:'
p205
sI583
S'            self.labels = [self.label(r) for r in records]'
p206
sI584
S''
sI585
S'    def options(self, zero=True):'
p207
sI586
S'        self.build_set()'
p208
sI587
S'        items = [(k, self.labels[i]) for (i, k) in enumerate(self.theset)]'
p209
sI588
S'        if self.sort:'
p210
sI589
S'            items.sort(options_sorter)'
p211
sI590
S'        if zero and self.zero is not None and not self.multiple:'
p212
ssg87
S'(self=<gluon.validators.IS_IN_DB object>, zero=True)'
p213
sg89
S'options'
p214
sa(dp215
g66
S'/home/SlugStock/web2py/gluon/validators.py'
p216
sg68
(dp217
S'self.dbset'
p218
S'<Set None>'
p219
sS'fields'
p220
S'[<pydal.objects.Field object>, <pydal.objects.Field object>]'
p221
sS'self'
p222
S'<gluon.validators.IS_IN_DB object>'
p223
sS').select'
p224
g111
sS'records'
p225
g111
sS'table'
p226
S'<Table scheduler_task (id,application_name,task_...times_failed,last_run_time,assigned_worker_name)>'
p227
sS'dd'
p228
S"{'cache': None, 'cacheable': True, 'distinct': None, 'groupby': None, 'left': None, 'orderby': <pydal.objects.Expression object>}"
p229
ssg74
I572
sg75
(dp230
I576
S"                    f for f in fields if not f.name == 'id'))"
p231
sI567
S'            distinct = self.distinct'
p232
sI568
S'            left = self.left'
p233
sI569
S'            dd = dict(orderby=orderby, groupby=groupby,'
p234
sI570
S'                      distinct=distinct, cache=self.cache,'
p235
sI571
S'                      cacheable=True, left=left)'
p236
sI572
S'            records = self.dbset(table).select(*fields, **dd)'
p237
sI573
S'        else:'
p238
sI574
S'            orderby = self.orderby or \\'
p239
sI575
S'                reduce(lambda a, b: a | b, ('
p240
ssg87
S'(self=<gluon.validators.IS_IN_DB object>)'
p241
sg89
S'build_set'
p242
sa(dp243
g66
S'/home/SlugStock/web2py/gluon/packages/dal/pydal/objects.py'
p244
sg68
(dp245
S'self.query'
p246
S'<Query (scheduler_task.id IS NOT NULL)>'
p247
sS'adapter.select'
p248
S'<bound method SQLiteAdapter.select of <pydal.adapters.sqlite.SQLiteAdapter object>>'
p249
sS'fields'
p250
S'[<pydal.objects.Field object>, <pydal.objects.Field object>]'
p251
sS'adapter'
p252
S'<pydal.adapters.sqlite.SQLiteAdapter object>'
p253
sS'attributes'
p254
S"{'cache': None, 'cacheable': True, 'distinct': None, 'groupby': None, 'left': None, 'orderby': <pydal.objects.Expression object>}"
p255
sS'self'
p256
S'<Set (scheduler_task.id IS NOT NULL)>'
p257
ssg74
I2002
sg75
(dp258
I1997
S"                                    attributes.get('join',None),"
p259
sI1998
S"                                    attributes.get('left',None),"
p260
sI1999
S"                                    attributes.get('orderby',None),"
p261
sI2000
S"                                    attributes.get('groupby',None))"
p262
sI2001
S'        fields = adapter.expand_all(fields, tablenames)'
p263
sI2002
S'        return adapter.select(self.query,fields,attributes)'
p264
sI2003
S''
sI2004
S'    def iterselect(self, *fields, **attributes):'
p265
sI2005
S'        adapter = self.db._adapter'
p266
sI2006
S'        tablenames = adapter.tables(self.query,'
p267
ssg87
S"(self=<Set (scheduler_task.id IS NOT NULL)>, *fields=[<pydal.objects.Field object>, <pydal.objects.Field object>], **attributes={'cache': None, 'cacheable': True, 'distinct': None, 'groupby': None, 'left': None, 'orderby': <pydal.objects.Expression object>})"
p268
sg89
S'select'
p269
sa(dp270
g66
S'/home/SlugStock/web2py/gluon/packages/dal/pydal/adapters/sqlite.py'
p271
sg68
(dp272
S'fields'
p273
S'[<pydal.objects.Field object>, <pydal.objects.Field object>]'
p274
sS'self'
p275
S'<pydal.adapters.sqlite.SQLiteAdapter object>'
p276
sS').select'
p277
S'<bound method SQLiteAdapter.select of <pydal.adapters.sqlite.SQLiteAdapter object>>'
p278
sS'attributes'
p279
S"{'cache': None, 'cacheable': True, 'distinct': None, 'groupby': None, 'left': None, 'orderby': <pydal.objects.Expression object>}"
p280
sS'global SQLiteAdapter'
p281
S"<class 'pydal.adapters.sqlite.SQLiteAdapter'>"
p282
sS'query'
p283
S'<Query (scheduler_task.id IS NOT NULL)>'
p284
sS'builtinsuper'
p285
S"<type 'super'>"
p286
ssg74
I122
sg75
(dp287
I117
S'        Note that the entire database, rather than one record, is locked'
p288
sI118
S'        (it will be locked eventually anyway by the following UPDATE).'
p289
sI119
S'        """'
p290
sI120
S"        if attributes.get('for_update', False) and not 'cache' in attributes:"
p291
sI121
S"            self.execute('BEGIN IMMEDIATE TRANSACTION;')"
p292
sI122
S'        return super(SQLiteAdapter, self).select(query, fields, attributes)'
p293
sI123
S''
sI124
S''
sI125
S'SPATIALLIBS = {'
p294
sI126
S"    'Windows':'libspatialite',"
p295
ssg87
S"(self=<pydal.adapters.sqlite.SQLiteAdapter object>, query=<Query (scheduler_task.id IS NOT NULL)>, fields=[<pydal.objects.Field object>, <pydal.objects.Field object>], attributes={'cache': None, 'cacheable': True, 'distinct': None, 'groupby': None, 'left': None, 'orderby': <pydal.objects.Expression object>})"
p296
sg89
g269
sa(dp297
g66
S'/home/SlugStock/web2py/gluon/packages/dal/pydal/adapters/base.py'
p298
sg68
(dp299
S'fields'
p300
S'[<pydal.objects.Field object>, <pydal.objects.Field object>]'
p301
sS'self'
p302
S'<pydal.adapters.sqlite.SQLiteAdapter object>'
p303
sS'attributes'
p304
S"{'cache': None, 'cacheable': True, 'distinct': None, 'groupby': None, 'left': None, 'orderby': <pydal.objects.Expression object>}"
p305
sS'self._select_aux'
p306
S'<bound method SQLiteAdapter._select_aux of <pydal.adapters.sqlite.SQLiteAdapter object>>'
p307
sS'sql'
p308
S"'SELECT  scheduler_task.task_name, scheduler_task...R BY scheduler_task.task_name, scheduler_task.id;'"
p309
ssg74
I1286
sg75
(dp310
I1281
S'            return cache_model('
p311
sI1282
S'                key,'
p312
sI1283
S'                lambda self=self,args=args:self._select_aux(*args),'
p313
sI1284
S'                time_expire)'
p314
sI1285
S'        else:'
p315
sI1286
S'            return self._select_aux(sql,fields,attributes)'
p316
sI1287
S''
sI1288
S'    def iterselect(self, query, fields, attributes):'
p317
sI1289
S'        sql = self._select(query, fields, attributes)'
p318
sI1290
S"        cacheable = attributes.get('cacheable', False)"
p319
ssg87
S"(self=<pydal.adapters.sqlite.SQLiteAdapter object>, query=<Query (scheduler_task.id IS NOT NULL)>, fields=[<pydal.objects.Field object>, <pydal.objects.Field object>], attributes={'cache': None, 'cacheable': True, 'distinct': None, 'groupby': None, 'left': None, 'orderby': <pydal.objects.Expression object>})"
p320
sg89
g269
sa(dp321
g66
S'/home/SlugStock/web2py/gluon/packages/dal/pydal/adapters/base.py'
p322
sg68
(dp323
S'self'
p324
S'<pydal.adapters.sqlite.SQLiteAdapter object>'
p325
sS'self.execute'
p326
S'<bound method SQLiteAdapter.execute of <pydal.adapters.sqlite.SQLiteAdapter object>>'
p327
sS'sql'
p328
S"'SELECT  scheduler_task.task_name, scheduler_task...R BY scheduler_task.task_name, scheduler_task.id;'"
p329
ssg74
I1243
sg75
(dp330
I1238
S''
sI1239
S'    def _select_aux(self, sql, fields, attributes):'
p331
sI1240
S'        args_get = attributes.get'
p332
sI1241
S"        cache = args_get('cache',None)"
p333
sI1242
S'        if not cache:'
p334
sI1243
S'            self.execute(sql)'
p335
sI1244
S'            rows = self._fetchall()'
p336
sI1245
S'        else:'
p337
sI1246
S'            if isinstance(cache, dict):'
p338
sI1247
S"                cache_model = cache['model']"
p339
ssg87
S"(self=<pydal.adapters.sqlite.SQLiteAdapter object>, sql='SELECT  scheduler_task.task_name, scheduler_task...R BY scheduler_task.task_name, scheduler_task.id;', fields=[<pydal.objects.Field object>, <pydal.objects.Field object>], attributes={'cache': None, 'cacheable': True, 'distinct': None, 'groupby': None, 'left': None, 'orderby': <pydal.objects.Expression object>})"
p340
sg89
S'_select_aux'
p341
sa(dp342
g66
S'/home/SlugStock/web2py/gluon/packages/dal/pydal/adapters/base.py'
p343
sg68
(dp344
S'a'
S"('SELECT  scheduler_task.task_name, scheduler_task...R BY scheduler_task.task_name, scheduler_task.id;',)"
p345
sS'self'
p346
S'<pydal.adapters.sqlite.SQLiteAdapter object>'
p347
sS'b'
g21
sS'self.log_execute'
p348
S'<bound method SQLiteAdapter.log_execute of <pydal.adapters.sqlite.SQLiteAdapter object>>'
p349
ssg74
I1378
sg75
(dp350
I1376
S''
sI1377
S'    def execute(self, *a, **b):'
p351
sI1378
S'        return self.log_execute(*a, **b)'
p352
sI1379
S''
sI1380
S'    def execute_test_query(self):'
p353
sI1381
S'        return self.execute(self.test_query)'
p354
sI1382
S''
sI1373
S'        self.db._timings.append((command,time.time()-t0))'
p355
sI1374
S'        del self.db._timings[:-TIMINGSSIZE]'
p356
sI1375
S'        return ret'
p357
ssg87
S"(self=<pydal.adapters.sqlite.SQLiteAdapter object>, *a=('SELECT  scheduler_task.task_name, scheduler_task...R BY scheduler_task.task_name, scheduler_task.id;',), **b={})"
p358
sg89
S'execute'
p359
sa(dp360
g66
S'/home/SlugStock/web2py/gluon/packages/dal/pydal/adapters/base.py'
p361
sg68
(dp362
S'a'
S"('SELECT  scheduler_task.task_name, scheduler_task...R BY scheduler_task.task_name, scheduler_task.id;',)"
p363
sS'b'
g21
sS'self'
p364
S'<pydal.adapters.sqlite.SQLiteAdapter object>'
p365
sS'ret'
p366
g111
sS'self.cursor'
p367
S'<sqlite3.Cursor object>'
p368
sS'command'
p369
S"'SELECT  scheduler_task.task_name, scheduler_task...R BY scheduler_task.task_name, scheduler_task.id;'"
p370
sS'self.cursor.execute'
p371
S'<built-in method execute of sqlite3.Cursor object>'
p372
ssg74
I1372
sg75
(dp373
I1376
S''
sI1367
S'            command = self.filter_sql_command(command)'
p374
sI1368
S'        if self.db._debug:'
p375
sI1369
S"            self.db.logger.debug('SQL: %s' % command)"
p376
sI1370
S'        self.db._lastsql = command'
p377
sI1371
S'        t0 = time.time()'
p378
sI1372
S'        ret = self.cursor.execute(command, *a[1:], **b)'
p379
sI1373
S'        self.db._timings.append((command,time.time()-t0))'
p380
sI1374
S'        del self.db._timings[:-TIMINGSSIZE]'
p381
sI1375
S'        return ret'
p382
ssg87
S"(self=<pydal.adapters.sqlite.SQLiteAdapter object>, *a=('SELECT  scheduler_task.task_name, scheduler_task...R BY scheduler_task.task_name, scheduler_task.id;',), **b={})"
p383
sg89
S'log_execute'
p384
sasS'pyver'
p385
S'Python 2.7.6: /usr/local/bin/uwsgi (prefix: /usr)'
p386
sS'session'
p387
g61
(S's\xc2\x01\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">flash</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">last_orderby</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">last_query</td><td style="vertical-align:top;">:</td><td><div>db.auth_membership.id&gt;0</div></td></tr></table></div>'
tRp388
sS'etype'
p389
S"<class 'sqlite3.OperationalError'>"
p390
sS'date'
p391
S'Mon Feb  8 21:26:01 2016'
p392
sS'response'
p393
g61
(S's\xc4\x1f\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">body</td><td style="vertical-align:top;">:</td><td><div>&lt;cStringIO.StringO object at 0x7f6296ca7f48&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_slugstock</td><td style="vertical-align:top;">:</td><td><div>169.233.207.252-9ca37525-a3db-44d3-8f15-35612ea2e0b6<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div>/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">delimiters</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>{{</div></td></tr><tr><td><div>}}</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">files</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">flash</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">form_label_separator</td><td style="vertical-align:top;">:</td><td><div>: </div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">formstyle</td><td style="vertical-align:top;">:</td><td><div>table3cols</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generic_patterns</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>*</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">google_analytics_id</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">headers</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">X-Powered-By</td><td style="vertical-align:top;">:</td><td><div>web2py</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">logo</td><td style="vertical-align:top;">:</td><td><div><a class="navbar-brand" href="http://www.web2py.com/" id="web2py-logo"><b>web<span>2</span>py</b>&trade;&nbsp;</a></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">menu</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div><table><tr><td><div>design</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/design/SlugStock</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>db</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/SlugStock/appadmin/index</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>state</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/SlugStock/appadmin/state</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>cache</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/SlugStock/appadmin/ccache</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">meta</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">author</td><td style="vertical-align:top;">:</td><td><div>Your Name &lt;you@example.com&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">description</td><td style="vertical-align:top;">:</td><td><div>a cool new app</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generator</td><td style="vertical-align:top;">:</td><td><div>Web2py Web Framework</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">keywords</td><td style="vertical-align:top;">:</td><td><div>web2py, python, framework</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">models_to_run</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>^\\w+\\.py$</div></td></tr><tr><td><div>^appadmin/\\w+\\.py$</div></td></tr><tr><td><div>^appadmin/insert/\\w+\\.py$</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">postprocessing</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_client</td><td style="vertical-align:top;">:</td><td><div>169.233.207.252</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_compression_level</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_expires</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_key</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_data_name</td><td style="vertical-align:top;">:</td><td><div>session_data_slugstock</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_file</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;/home/SlugStock/web2py/applications/SlugStock/sessions/092/15a/169.233.207.252-9ca37525-a3db-44d3-8f15-35612ea2e0b6&#x27;, mode &#x27;rb+&#x27; at 0x7f629747dc00&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_filename</td><td style="vertical-align:top;">:</td><td><div>/home/SlugStock/web2py/applications/SlugStock/sessions/169.233.207.252-9ca37525-a3db-44d3-8f15-35612ea2e0b6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_hash</td><td style="vertical-align:top;">:</td><td><div>979c1331393b644f984e1aba58ea58af</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id</td><td style="vertical-align:top;">:</td><td><div>169.233.207.252-9ca37525-a3db-44d3-8f15-35612ea2e0b6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_name</td><td style="vertical-align:top;">:</td><td><div>session_id_slugstock</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_locked</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_masterapp</td><td style="vertical-align:top;">:</td><td><div>SlugStock</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_new</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_storage_type</td><td style="vertical-align:top;">:</td><td><div>file</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">status</td><td style="vertical-align:top;">:</td><td><div>200</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">subtitle</td><td style="vertical-align:top;">:</td><td><div>Database Administration (appadmin)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">title</td><td style="vertical-align:top;">:</td><td><div>Slugstock</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">view</td><td style="vertical-align:top;">:</td><td><div>appadmin.html</div></td></tr></table></div>'
tRp394
sS'locals'
p395
(dp396
S'a'
S"('SELECT  scheduler_task.task_name, scheduler_task...R BY scheduler_task.task_name, scheduler_task.id;',)"
p397
sS'self'
p398
S'<pydal.adapters.sqlite.SQLiteAdapter object>'
p399
sS'b'
g21
sS'command'
p400
S"'SELECT  scheduler_task.task_name, scheduler_task...R BY scheduler_task.task_name, scheduler_task.id;'"
p401
sS't0'
p402
S'1454966761.59751'
p403
sssS'traceback'
p404
S'Traceback (most recent call last):\n  File "/home/SlugStock/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/SlugStock/web2py/applications/SlugStock/controllers/appadmin.py", line 703, in <module>\n  File "/home/SlugStock/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/SlugStock/web2py/applications/SlugStock/controllers/appadmin.py", line 150, in insert\n    form = SQLFORM(db[table], ignore_rw=ignore_rw)\n  File "/home/SlugStock/web2py/gluon/sqlhtml.py", line 1261, in __init__\n    inp = self.widgets.options.widget(field, default)\n  File "/home/SlugStock/web2py/gluon/sqlhtml.py", line 313, in widget\n    options = requires[0].options()\n  File "/home/SlugStock/web2py/gluon/validators.py", line 586, in options\n    self.build_set()\n  File "/home/SlugStock/web2py/gluon/validators.py", line 572, in build_set\n    records = self.dbset(table).select(*fields, **dd)\n  File "/home/SlugStock/web2py/gluon/packages/dal/pydal/objects.py", line 2002, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/SlugStock/web2py/gluon/packages/dal/pydal/adapters/sqlite.py", line 122, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/SlugStock/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1286, in select\n    return self._select_aux(sql,fields,attributes)\n  File "/home/SlugStock/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1243, in _select_aux\n    self.execute(sql)\n  File "/home/SlugStock/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1378, in execute\n    return self.log_execute(*a, **b)\n  File "/home/SlugStock/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1372, in log_execute\n    ret = self.cursor.execute(command, *a[1:], **b)\nOperationalError: no such table: scheduler_task\n'
p405
s.