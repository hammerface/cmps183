(dp1
S'output'
p2
S"<type 'exceptions.Exception'> Validation error, field:uuid <gluon.validators.IS_NOT_IN_DB object at 0x7f62968d0ad0>"
p3
sS'layer'
p4
S'/home/SlugStock/web2py/applications/SlugStock/controllers/appadmin.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n# ##########################################################\n# ## make sure administrator is on localhost\n# ###########################################################\n\nimport os\nimport socket\nimport datetime\nimport copy\nimport gluon.contenttype\nimport gluon.fileutils\n\ntry:\n    import pygraphviz as pgv\nexcept ImportError:\n    pgv = None\n\nis_gae = request.env.web2py_runtime_gae or False\n\n# ## critical --- make a copy of the environment\n\nglobal_env = copy.copy(globals())\nglobal_env[\'datetime\'] = datetime\n\nhttp_host = request.env.http_host.split(\':\')[0]\nremote_addr = request.env.remote_addr\ntry:\n    hosts = (http_host, socket.gethostname(),\n             socket.gethostbyname(http_host),\n             \'::1\', \'127.0.0.1\', \'::ffff:127.0.0.1\')\nexcept:\n    hosts = (http_host, )\n\nif request.is_https:\n    session.secure()\nelif (remote_addr not in hosts) and (remote_addr != "127.0.0.1") and \\\n    (request.function != \'manage\'):\n    raise HTTP(200, T(\'appadmin is disabled because insecure channel\'))\n\nif request.function == \'manage\':\n    if not \'auth\' in globals() or not request.args:\n        redirect(URL(request.controller, \'index\'))\n    manager_action = auth.settings.manager_actions.get(request.args(0), None)\n    if manager_action is None and request.args(0) == \'auth\':\n        manager_action = dict(role=auth.settings.auth_manager_role,\n                              heading=T(\'Manage Access Control\'),\n                              tables=[auth.table_user(),\n                                      auth.table_group(),\n                                      auth.table_permission()])\n    manager_role = manager_action.get(\'role\', None) if manager_action else None\n    if not (gluon.fileutils.check_credentials(request) or auth.has_membership(manager_role)):\n        raise HTTP(403, "Not authorized")\n    menu = False\nelif (request.application == \'admin\' and not session.authorized) or \\\n        (request.application != \'admin\' and not gluon.fileutils.check_credentials(request)):\n    redirect(URL(\'admin\', \'default\', \'index\',\n                 vars=dict(send=URL(args=request.args, vars=request.vars))))\nelse:\n    response.subtitle = T(\'Database Administration (appadmin)\')\n    menu = True\n\nignore_rw = True\nresponse.view = \'appadmin.html\'\nif menu:\n    response.menu = [[T(\'design\'), False, URL(\'admin\', \'default\', \'design\',\n                 args=[request.application])], [T(\'db\'), False,\n                 URL(\'index\')], [T(\'state\'), False,\n                 URL(\'state\')], [T(\'cache\'), False,\n                 URL(\'ccache\')]]\n\n# ##########################################################\n# ## auxiliary functions\n# ###########################################################\n\nif False and request.tickets_db:\n    from gluon.restricted import TicketStorage\n    ts = TicketStorage()\n    ts._get_table(request.tickets_db, ts.tablename, request.application)\n\ndef get_databases(request):\n    dbs = {}\n    for (key, value) in global_env.items():\n        try:\n            cond = isinstance(value, GQLDB)\n        except:\n            cond = isinstance(value, SQLDB)\n        if cond:\n            dbs[key] = value\n    return dbs\n\ndatabases = get_databases(None)\n\ndef eval_in_global_env(text):\n    exec (\'_ret=%s\' % text, {}, global_env)\n    return global_env[\'_ret\']\n\n\ndef get_database(request):\n    if request.args and request.args[0] in databases:\n        return eval_in_global_env(request.args[0])\n    else:\n        session.flash = T(\'invalid request\')\n        redirect(URL(\'index\'))\n\ndef get_table(request):\n    db = get_database(request)\n    if len(request.args) > 1 and request.args[1] in db.tables:\n        return (db, request.args[1])\n    else:\n        session.flash = T(\'invalid request\')\n        redirect(URL(\'index\'))\n\n\ndef get_query(request):\n    try:\n        return eval_in_global_env(request.vars.query)\n    except Exception:\n        return None\n\n\ndef query_by_table_type(tablename, db, request=request):\n    keyed = hasattr(db[tablename], \'_primarykey\')\n    if keyed:\n        firstkey = db[tablename][db[tablename]._primarykey[0]]\n        cond = \'>0\'\n        if firstkey.type in [\'string\', \'text\']:\n            cond = \'!=""\'\n        qry = \'%s.%s.%s%s\' % (\n            request.args[0], request.args[1], firstkey.name, cond)\n    else:\n        qry = \'%s.%s.id>0\' % tuple(request.args[:2])\n    return qry\n\n\n# ##########################################################\n# ## list all databases and tables\n# ###########################################################\ndef index():\n    return dict(databases=databases)\n\n\n# ##########################################################\n# ## insert a new record\n# ###########################################################\n\n\ndef insert():\n    (db, table) = get_table(request)\n    form = SQLFORM(db[table], ignore_rw=ignore_rw)\n    if form.accepts(request.vars, session):\n        response.flash = T(\'new record inserted\')\n    return dict(form=form, table=db[table])\n\n\n# ##########################################################\n# ## list all records in table and insert new record\n# ###########################################################\n\n\ndef download():\n    import os\n    db = get_database(request)\n    return response.download(request, db)\n\n\ndef csv():\n    import gluon.contenttype\n    response.headers[\'Content-Type\'] = \\\n        gluon.contenttype.contenttype(\'.csv\')\n    db = get_database(request)\n    query = get_query(request)\n    if not query:\n        return None\n    response.headers[\'Content-disposition\'] = \'attachment; filename=%s_%s.csv\'\\\n        % tuple(request.vars.query.split(\'.\')[:2])\n    return str(db(query, ignore_common_filters=True).select())\n\n\ndef import_csv(table, file):\n    table.import_from_csv_file(file)\n\n\ndef select():\n    import re\n    db = get_database(request)\n    dbname = request.args[0]\n    try:\n        is_imap = db._uri.startswith("imap://")\n    except (KeyError, AttributeError, TypeError):\n        is_imap = False\n    regex = re.compile(\'(?P<table>\\w+)\\.(?P<field>\\w+)=(?P<value>\\d+)\')\n    if len(request.args) > 1 and hasattr(db[request.args[1]], \'_primarykey\'):\n        regex = re.compile(\'(?P<table>\\w+)\\.(?P<field>\\w+)=(?P<value>.+)\')\n    if request.vars.query:\n        match = regex.match(request.vars.query)\n        if match:\n            request.vars.query = \'%s.%s.%s==%s\' % (request.args[0],\n                                                   match.group(\'table\'), match.group(\'field\'),\n                                                   match.group(\'value\'))\n    else:\n        request.vars.query = session.last_query\n    query = get_query(request)\n    if request.vars.start:\n        start = int(request.vars.start)\n    else:\n        start = 0\n    nrows = 0\n\n    step = 100\n    fields = []\n\n    if is_imap:\n        step = 3\n \n    stop = start + step\n\n    table = None\n    rows = []\n    orderby = request.vars.orderby\n    if orderby:\n        orderby = dbname + \'.\' + orderby\n        if orderby == session.last_orderby:\n            if orderby[0] == \'~\':\n                orderby = orderby[1:]\n            else:\n                orderby = \'~\' + orderby\n    session.last_orderby = orderby\n    session.last_query = request.vars.query\n    form = FORM(TABLE(TR(T(\'Query:\'), \'\', INPUT(_style=\'width:400px\',\n                _name=\'query\', _value=request.vars.query or \'\',\n                requires=IS_NOT_EMPTY(\n                    error_message=T("Cannot be empty")))), TR(T(\'Update:\'),\n                INPUT(_name=\'update_check\', _type=\'checkbox\',\n                value=False), INPUT(_style=\'width:400px\',\n                _name=\'update_fields\', _value=request.vars.update_fields\n                                    or \'\')), TR(T(\'Delete:\'), INPUT(_name=\'delete_check\',\n                _class=\'delete\', _type=\'checkbox\', value=False), \'\'),\n                TR(\'\', \'\', INPUT(_type=\'submit\', _value=T(\'submit\')))),\n                _action=URL(r=request, args=request.args))\n\n    tb = None\n    if form.accepts(request.vars, formname=None):\n        regex = re.compile(request.args[0] + \'\\.(?P<table>\\w+)\\..+\')\n        match = regex.match(form.vars.query.strip())\n        if match:\n            table = match.group(\'table\')\n        try:\n            nrows = db(query, ignore_common_filters=True).count()\n            if form.vars.update_check and form.vars.update_fields:\n                db(query, ignore_common_filters=True).update(\n                    **eval_in_global_env(\'dict(%s)\' % form.vars.update_fields))\n                response.flash = T(\'%s %%{row} updated\', nrows)\n            elif form.vars.delete_check:\n                db(query, ignore_common_filters=True).delete()\n                response.flash = T(\'%s %%{row} deleted\', nrows)\n            nrows = db(query, ignore_common_filters=True).count()\n\n            if is_imap:\n                fields = [db[table][name] for name in\n                    ("id", "uid", "created", "to",\n                     "sender", "subject")]\n            if orderby:\n                rows = db(query, ignore_common_filters=True).select(\n                              *fields, limitby=(start, stop),\n                              orderby=eval_in_global_env(orderby))\n            else:\n                rows = db(query, ignore_common_filters=True).select(\n                    *fields, limitby=(start, stop))\n        except Exception, e:\n            import traceback\n            tb = traceback.format_exc()\n            (rows, nrows) = ([], 0)\n            response.flash = DIV(T(\'Invalid Query\'), PRE(str(e)))\n    # begin handle upload csv\n    csv_table = table or request.vars.table\n    if csv_table:\n        formcsv = FORM(str(T(\'or import from csv file\')) + " ",\n                       INPUT(_type=\'file\', _name=\'csvfile\'),\n                       INPUT(_type=\'hidden\', _value=csv_table, _name=\'table\'),\n                       INPUT(_type=\'submit\', _value=T(\'import\')))\n    else:\n        formcsv = None\n    if formcsv and formcsv.process().accepted:\n        try:\n            import_csv(db[request.vars.table],\n                       request.vars.csvfile.file)\n            response.flash = T(\'data uploaded\')\n        except Exception, e:\n            response.flash = DIV(T(\'unable to parse csv file\'), PRE(str(e)))\n    # end handle upload csv\n\n    return dict(\n        form=form,\n        table=table,\n        start=start,\n        stop=stop,\n        step=step,\n        nrows=nrows,\n        rows=rows,\n        query=request.vars.query,\n        formcsv=formcsv,\n        tb=tb\n    )\n\n\n# ##########################################################\n# ## edit delete one record\n# ###########################################################\n\n\ndef update():\n    (db, table) = get_table(request)\n    keyed = hasattr(db[table], \'_primarykey\')\n    record = None\n    db[table]._common_filter = None\n    if keyed:\n        key = [f for f in request.vars if f in db[table]._primarykey]\n        if key:\n            record = db(db[table][key[0]] == request.vars[key[\n                        0]]).select().first()\n    else:\n        record = db(db[table].id == request.args(\n            2)).select().first()\n\n    if not record:\n        qry = query_by_table_type(table, db)\n        session.flash = T(\'record does not exist\')\n        redirect(URL(\'select\', args=request.args[:1],\n                     vars=dict(query=qry)))\n\n    if keyed:\n        for k in db[table]._primarykey:\n            db[table][k].writable = False\n\n    form = SQLFORM(\n        db[table], record, deletable=True, delete_label=T(\'Check to delete\'),\n        ignore_rw=ignore_rw and not keyed,\n        linkto=URL(\'select\',\n                   args=request.args[:1]), upload=URL(r=request,\n                                                      f=\'download\', args=request.args[:1]))\n\n    if form.accepts(request.vars, session):\n        session.flash = T(\'done!\')\n        qry = query_by_table_type(table, db)\n        redirect(URL(\'select\', args=request.args[:1],\n                 vars=dict(query=qry)))\n    return dict(form=form, table=db[table])\n\n\n# ##########################################################\n# ## get global variables\n# ###########################################################\n\n\ndef state():\n    return dict()\n\n\ndef ccache():\n    if is_gae:\n        form = FORM(\n            P(TAG.BUTTON(T("Clear CACHE?"), _type="submit", _name="yes", _value="yes")))\n    else:\n        cache.ram.initialize()\n        cache.disk.initialize()\n\n        form = FORM(\n            P(TAG.BUTTON(\n                T("Clear CACHE?"), _type="submit", _name="yes", _value="yes")),\n            P(TAG.BUTTON(\n                T("Clear RAM"), _type="submit", _name="ram", _value="ram")),\n            P(TAG.BUTTON(\n                T("Clear DISK"), _type="submit", _name="disk", _value="disk")),\n        )\n\n    if form.accepts(request.vars, session):\n        session.flash = ""\n        if is_gae:\n            if request.vars.yes:\n                cache.ram.clear()\n                session.flash += T("Cache Cleared")\n        else:\n            clear_ram = False\n            clear_disk = False\n            if request.vars.yes:\n                clear_ram = clear_disk = True\n            if request.vars.ram:\n                clear_ram = True\n            if request.vars.disk:\n                clear_disk = True\n            if clear_ram:\n                cache.ram.clear()\n                session.flash += T("Ram Cleared")\n            if clear_disk:\n                cache.disk.clear()\n                session.flash += T("Disk Cleared")\n        redirect(URL(r=request))\n\n    try:\n        from guppy import hpy\n        hp = hpy()\n    except ImportError:\n        hp = False\n\n    import shelve\n    import os\n    import copy\n    import time\n    import math\n    from gluon import portalocker\n\n    ram = {\n        \'entries\': 0,\n        \'bytes\': 0,\n        \'objects\': 0,\n        \'hits\': 0,\n        \'misses\': 0,\n        \'ratio\': 0,\n        \'oldest\': time.time(),\n        \'keys\': []\n    }\n    \n    disk = copy.copy(ram)\n    total = copy.copy(ram)\n    disk[\'keys\'] = []\n    total[\'keys\'] = []\n\n    def GetInHMS(seconds):\n        hours = math.floor(seconds / 3600)\n        seconds -= hours * 3600\n        minutes = math.floor(seconds / 60)\n        seconds -= minutes * 60\n        seconds = math.floor(seconds)\n\n        return (hours, minutes, seconds)\n\n    if is_gae:\n        gae_stats = cache.ram.client.get_stats()\n        try:\n            gae_stats[\'ratio\'] = ((gae_stats[\'hits\'] * 100) /\n                (gae_stats[\'hits\'] + gae_stats[\'misses\']))\n        except ZeroDivisionError:\n            gae_stats[\'ratio\'] = T("?")\n        gae_stats[\'oldest\'] = GetInHMS(time.time() - gae_stats[\'oldest_item_age\'])\n        total.update(gae_stats)\n    else:\n        # get ram stats directly from the cache object\n        ram_stats = cache.ram.stats[request.application]\n        ram[\'hits\'] = ram_stats[\'hit_total\'] - ram_stats[\'misses\']\n        ram[\'misses\'] = ram_stats[\'misses\']\n        try:\n            ram[\'ratio\'] = ram[\'hits\'] * 100 / ram_stats[\'hit_total\']\n        except (KeyError, ZeroDivisionError):\n            ram[\'ratio\'] = 0\n\n        for key, value in cache.ram.storage.iteritems():\n            if hp:\n                ram[\'bytes\'] += hp.iso(value[1]).size\n                ram[\'objects\'] += hp.iso(value[1]).count\n            ram[\'entries\'] += 1\n            if value[0] < ram[\'oldest\']:\n                ram[\'oldest\'] = value[0]\n            ram[\'keys\'].append((key, GetInHMS(time.time() - value[0])))\n\n        for key in cache.disk.storage:\n            value = cache.disk.storage[key]\n            if isinstance(value[1], dict):\n                disk[\'hits\'] = value[1][\'hit_total\'] - value[1][\'misses\']\n                disk[\'misses\'] = value[1][\'misses\']\n                try:\n                    disk[\'ratio\'] = disk[\'hits\'] * 100 / value[1][\'hit_total\']\n                except (KeyError, ZeroDivisionError):\n                    disk[\'ratio\'] = 0\n            else:\n                if hp:\n                    disk[\'bytes\'] += hp.iso(value[1]).size\n                    disk[\'objects\'] += hp.iso(value[1]).count\n                disk[\'entries\'] += 1\n                if value[0] < disk[\'oldest\']:\n                    disk[\'oldest\'] = value[0]\n                disk[\'keys\'].append((key, GetInHMS(time.time() - value[0])))\n\n        ram_keys = ram.keys() # [\'hits\', \'objects\', \'ratio\', \'entries\', \'keys\', \'oldest\', \'bytes\', \'misses\']\n        ram_keys.remove(\'ratio\')\n        ram_keys.remove(\'oldest\')\n        for key in ram_keys:\n            total[key] = ram[key] + disk[key]\n\n        try:\n            total[\'ratio\'] = total[\'hits\'] * 100 / (total[\'hits\'] +\n                                                total[\'misses\'])\n        except (KeyError, ZeroDivisionError):\n            total[\'ratio\'] = 0\n\n        if disk[\'oldest\'] < ram[\'oldest\']:\n            total[\'oldest\'] = disk[\'oldest\']\n        else:\n            total[\'oldest\'] = ram[\'oldest\']\n\n        ram[\'oldest\'] = GetInHMS(time.time() - ram[\'oldest\'])\n        disk[\'oldest\'] = GetInHMS(time.time() - disk[\'oldest\'])\n        total[\'oldest\'] = GetInHMS(time.time() - total[\'oldest\'])\n\n    def key_table(keys):\n        return TABLE(\n            TR(TD(B(T(\'Key\'))), TD(B(T(\'Time in Cache (h:m:s)\')))),\n            *[TR(TD(k[0]), TD(\'%02d:%02d:%02d\' % k[1])) for k in keys],\n            **dict(_class=\'cache-keys\',\n                   _style="border-collapse: separate; border-spacing: .5em;"))\n\n    if not is_gae:\n        ram[\'keys\'] = key_table(ram[\'keys\'])\n        disk[\'keys\'] = key_table(disk[\'keys\'])\n        total[\'keys\'] = key_table(total[\'keys\'])\n\n    return dict(form=form, total=total,\n                ram=ram, disk=disk, object_stats=hp != False)\n\n\ndef table_template(table):\n    from gluon.html import TR, TD, TABLE, TAG\n\n    def FONT(*args, **kwargs):\n        return TAG.font(*args, **kwargs)\n\n    def types(field):\n        f_type = field.type\n        if not isinstance(f_type,str):\n            return \' \'\n        elif f_type == \'string\':\n            return field.length\n        elif f_type == \'id\':\n            return B(\'pk\')\n        elif f_type.startswith(\'reference\') or \\\n                f_type.startswith(\'list:reference\'):\n            return B(\'fk\')\n        else:\n            return \' \'\n\n    # This is horribe HTML but the only one graphiz understands\n    rows = []\n    cellpadding = 4\n    color = "#000000"\n    bgcolor = "#FFFFFF"\n    face = "Helvetica"\n    face_bold = "Helvetica Bold"\n    border = 0\n\n    rows.append(TR(TD(FONT(table, _face=face_bold, _color=bgcolor),\n                           _colspan=3, _cellpadding=cellpadding,\n                           _align="center", _bgcolor=color)))\n    for row in db[table]:\n        rows.append(TR(TD(FONT(row.name, _color=color, _face=face_bold),\n                              _align="left", _cellpadding=cellpadding,\n                              _border=border),\n                       TD(FONT(row.type, _color=color, _face=face),\n                               _align="left", _cellpadding=cellpadding,\n                               _border=border),\n                       TD(FONT(types(row), _color=color, _face=face),\n                               _align="center", _cellpadding=cellpadding,\n                               _border=border)))\n    return "< %s >" % TABLE(*rows, **dict(_bgcolor=bgcolor, _border=1,\n                                          _cellborder=0, _cellspacing=0)\n                             ).xml()\n\n\ndef bg_graph_model():\n    graph = pgv.AGraph(layout=\'dot\',  directed=True,  strict=False,  rankdir=\'LR\')\n\n    subgraphs = dict()\n    for tablename in db.tables:\n        if hasattr(db[tablename],\'_meta_graphmodel\'):\n            meta_graphmodel = db[tablename]._meta_graphmodel\n        else:\n            meta_graphmodel = dict(group=request.application, color=\'#ECECEC\')\n\n        group = meta_graphmodel[\'group\'].replace(\' \', \'\')\n        if not subgraphs.has_key(group):\n            subgraphs[group] = dict(meta=meta_graphmodel, tables=[])\n        subgraphs[group][\'tables\'].append(tablename)\n\n        graph.add_node(tablename, name=tablename, shape=\'plaintext\',\n                       label=table_template(tablename))\n\n    for n, key in enumerate(subgraphs.iterkeys()):\n        graph.subgraph(nbunch=subgraphs[key][\'tables\'],\n                    name=\'cluster%d\' % n,\n                    style=\'filled\',\n                    color=subgraphs[key][\'meta\'][\'color\'],\n                    label=subgraphs[key][\'meta\'][\'group\'])\n\n    for tablename in db.tables:\n        for field in db[tablename]:\n            f_type = field.type\n            if isinstance(f_type,str) and (\n                f_type.startswith(\'reference\') or\n                f_type.startswith(\'list:reference\')):\n                referenced_table = f_type.split()[1].split(\'.\')[0]\n                n1 = graph.get_node(tablename)\n                n2 = graph.get_node(referenced_table)\n                graph.add_edge(n1, n2, color="#4C4C4C", label=\'\')\n\n    graph.layout()\n    if not request.args:\n        response.headers[\'Content-Type\'] = \'image/png\'\n        return graph.draw(format=\'png\', prog=\'dot\')\n    else:\n        response.headers[\'Content-Disposition\']=\'attachment;filename=graph.%s\'%request.args(0)\n        if request.args(0) == \'dot\':\n            return graph.string()\n        else:\n            return graph.draw(format=request.args(0), prog=\'dot\')\n\ndef graph_model():\n    return dict(databases=databases, pgv=pgv)\n\ndef manage():\n    tables = manager_action[\'tables\']\n    if isinstance(tables[0], str):\n        db = manager_action.get(\'db\', auth.db)\n        db = globals()[db] if isinstance(db, str) else db\n        tables = [db[table] for table in tables]\n    if request.args(0) == \'auth\':\n        auth.table_user()._plural = T(\'Users\')\n        auth.table_group()._plural = T(\'Roles\')\n        auth.table_membership()._plural = T(\'Memberships\')\n        auth.table_permission()._plural = T(\'Permissions\')\n    if request.extension != \'load\':\n        return dict(heading=manager_action.get(\'heading\',\n                    T(\'Manage %(action)s\') % dict(action=request.args(0).replace(\'_\', \' \').title())),\n                    tablenames=[table._tablename for table in tables],\n                    labels=[table._plural.title() for table in tables])\n\n    table = tables[request.args(1, cast=int)]\n    formname = \'%s_grid\' % table._tablename\n    linked_tables = orderby = None\n    if request.args(0) == \'auth\':\n        auth.table_group()._id.readable = \\\n        auth.table_membership()._id.readable = \\\n        auth.table_permission()._id.readable = False\n        auth.table_membership().user_id.label = T(\'User\')\n        auth.table_membership().group_id.label = T(\'Role\')\n        auth.table_permission().group_id.label = T(\'Role\')\n        auth.table_permission().name.label = T(\'Permission\')\n        if table == auth.table_user():\n            linked_tables=[auth.settings.table_membership_name]\n        elif table == auth.table_group():\n            orderby = \'role\' if not request.args(3) or \'.group_id\' not in request.args(3) else None\n        elif table == auth.table_permission():\n            orderby = \'group_id\'\n    kwargs = dict(user_signature=True, maxtextlength=1000,\n                  orderby=orderby, linked_tables=linked_tables)\n    smartgrid_args = manager_action.get(\'smartgrid_args\', {})\n    kwargs.update(**smartgrid_args.get(\'DEFAULT\', {}))\n    kwargs.update(**smartgrid_args.get(table._tablename, {}))\n    grid = SQLFORM.smartgrid(table, args=request.args[:2], formname=formname, **kwargs)\n    return grid\n\ndef hooks():\n    import functools\n    import inspect\n    list_op=[\'_%s_%s\' %(h,m) for h in [\'before\', \'after\'] for m in [\'insert\',\'update\',\'delete\']]\n    tables=[]\n    with_build_it=False\n    for db_str in sorted(databases):\n        db = databases[db_str]\n        for t in db.tables:\n            method_hooks=[]\n            for op in list_op:\n                functions = []\n                for f in getattr(db[t], op):\n                    if hasattr(f, \'__call__\'):\n                        try:\n                            if isinstance(f, (functools.partial)):\n                                f = f.func\n                            filename = inspect.getsourcefile(f)\n                            details = {\'funcname\':f.__name__,\n                                       \'filename\':filename[len(request.folder):] if request.folder in filename else None,\n                                       \'lineno\': inspect.getsourcelines(f)[1]}\n                            if details[\'filename\']: # Built in functions as delete_uploaded_files are not editable\n                                details[\'url\'] = URL(a=\'admin\',c=\'default\',f=\'edit\', args=[request[\'application\'], details[\'filename\']],vars={\'lineno\':details[\'lineno\']})\n                            if details[\'filename\'] or with_build_it:\n                                functions.append(details)\n                        # compiled app and windows build don\'t support code inspection\n                        except:\n                            pass\n                if len(functions):\n                    method_hooks.append({\'name\':op, \'functions\':functions})\n            if len(method_hooks):\n                tables.append({\'name\':"%s.%s" % (db_str,t), \'slug\': IS_SLUG()("%s.%s" % (db_str,t))[0], \'method_hooks\':method_hooks})\n    # Render\n    ul_main = UL(_class=\'nav nav-list\')\n    for t in tables:\n        ul_main.append(A(t[\'name\'], _onclick="collapse(\'a_%s\')" % t[\'slug\']))\n        ul_t = UL(_class=\'nav nav-list\', _id="a_%s" % t[\'slug\'], _style=\'display:none\')\n        for op in t[\'method_hooks\']:\n            ul_t.append(LI (op[\'name\']))\n            ul_t.append(UL([LI(A(f[\'funcname\'], _class="editor_filelink", _href=f[\'url\']if \'url\' in f else None, **{\'_data-lineno\':f[\'lineno\']-1})) for f in op[\'functions\']]))\n        ul_main.append(ul_t)\n    return ul_main\n\nresponse._vars=response._caller(insert)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__hash__'
p12
S"<method-wrapper '__hash__' of exceptions.Exception object>"
p13
sS'__setattr__'
p14
S"<method-wrapper '__setattr__' of exceptions.Exception object>"
p15
sS'__reduce_ex__'
p16
S'<built-in method __reduce_ex__ of exceptions.Exception object>'
p17
sS'__getslice__'
p18
S"<method-wrapper '__getslice__' of exceptions.Exception object>"
p19
sS'__getitem__'
p20
S"<method-wrapper '__getitem__' of exceptions.Exception object>"
p21
sS'__setstate__'
p22
S'<built-in method __setstate__ of exceptions.Exception object>'
p23
sS'args'
p24
S"('Validation error, field:uuid <gluon.validators.IS_NOT_IN_DB object at 0x7f62968d0ad0>',)"
p25
sS'__reduce__'
p26
S'<built-in method __reduce__ of exceptions.Exception object>'
p27
sS'__str__'
p28
S"<method-wrapper '__str__' of exceptions.Exception object>"
p29
sS'__format__'
p30
S'<built-in method __format__ of exceptions.Exception object>'
p31
sS'__getattribute__'
p32
S"<method-wrapper '__getattribute__' of exceptions.Exception object>"
p33
sS'__class__'
p34
S"<type 'exceptions.Exception'>"
p35
sS'__unicode__'
p36
S'<built-in method __unicode__ of exceptions.Exception object>'
p37
sS'__delattr__'
p38
S"<method-wrapper '__delattr__' of exceptions.Exception object>"
p39
sS'__subclasshook__'
p40
S'<built-in method __subclasshook__ of type object>'
p41
sS'__repr__'
p42
S"<method-wrapper '__repr__' of exceptions.Exception object>"
p43
sS'__dict__'
p44
S'{}'
p45
sS'__sizeof__'
p46
S'<built-in method __sizeof__ of exceptions.Exception object>'
p47
sS'__doc__'
p48
S"'Common base class for all non-exit exceptions.'"
p49
sS'__init__'
p50
S"<method-wrapper '__init__' of exceptions.Exception object>"
p51
sS'__new__'
p52
S'<built-in method __new__ of type object>'
p53
ssS'evalue'
p54
S'Validation error, field:uuid <gluon.validators.IS_NOT_IN_DB object at 0x7f62968d0ad0>'
p55
sS'request'
p56
cgluon.html
XML_unpickle
p57
(S's\xe0_\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">ajax</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">application</td><td style="vertical-align:top;">:</td><td><div>SlugStock</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">args</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>db</div></td></tr><tr><td><div>scheduler_task</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cid</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">client</td><td style="vertical-align:top;">:</td><td><div>169.233.207.252</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">controller</td><td style="vertical-align:top;">:</td><td><div>appadmin</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_admin</td><td style="vertical-align:top;">:</td><td><div>169.233.207.252-2354f146-e352-4a71-abb2-c1b26d283e4a<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_slugstock</td><td style="vertical-align:top;">:</td><td><div>169.233.207.252-9ca37525-a3db-44d3-8f15-35612ea2e0b6<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_slugstockcurrent</td><td style="vertical-align:top;">:</td><td><div>169.233.207.252-4b789e59-aae6-4cf1-a67b-afb7173a51f5<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_welcome</td><td style="vertical-align:top;">:</td><td><div>169.233.207.252-57ea73d9-c7b3-48d8-962c-13cacc2e59cf<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">env</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">CONTENT_LENGTH</td><td style="vertical-align:top;">:</td><td><div>2565</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">CONTENT_TYPE</td><td style="vertical-align:top;">:</td><td><div>multipart/form-data; boundary=---------------------------205551471428026</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">DOCUMENT_ROOT</td><td style="vertical-align:top;">:</td><td><div>/usr/local/openresty/nginx/html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTPS</td><td style="vertical-align:top;">:</td><td><div>on</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT</td><td style="vertical-align:top;">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_ENCODING</td><td style="vertical-align:top;">:</td><td><div>gzip, deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_LANGUAGE</td><td style="vertical-align:top;">:</td><td><div>en-US,en;q=0.5</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONNECTION</td><td style="vertical-align:top;">:</td><td><div>close</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONTENT_LENGTH</td><td style="vertical-align:top;">:</td><td><div>2565</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONTENT_TYPE</td><td style="vertical-align:top;">:</td><td><div>multipart/form-data; boundary=---------------------------205551471428026</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_COOKIE</td><td style="vertical-align:top;">:</td><td><div>_ga=GA1.2.1168300973.1452644018; session_id_welcome=169.233.207.252-57ea73d9-c7b3-48d8-962c-13cacc2e59cf; session_id_admin=169.233.207.252-2354f146-e352-4a71-abb2-c1b26d283e4a; session_id_slugstock=169.233.207.252-9ca37525-a3db-44d3-8f15-35612ea2e0b6; session_id_slugstockcurrent=169.233.207.252-4b789e59-aae6-4cf1-a67b-afb7173a51f5; _gat=1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_HOST</td><td style="vertical-align:top;">:</td><td><div>slugstock.pythonanywhere.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_REFERER</td><td style="vertical-align:top;">:</td><td><div>https://slugstock.pythonanywhere.com/SlugStock/appadmin/insert/db/scheduler_task</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_USER_AGENT</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (Windows NT 6.3; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_X_FORWARDED_FOR</td><td style="vertical-align:top;">:</td><td><div>169.233.207.252</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_X_REAL_IP</td><td style="vertical-align:top;">:</td><td><div>169.233.207.252</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">PATH_INFO</td><td style="vertical-align:top;">:</td><td><div>/SlugStock/appadmin/insert/db/scheduler_task</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">QUERY_STRING</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_ADDR</td><td style="vertical-align:top;">:</td><td><div>10.169.229.133</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_PORT</td><td style="vertical-align:top;">:</td><td><div>50473</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REQUEST_METHOD</td><td style="vertical-align:top;">:</td><td><div>POST</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REQUEST_URI</td><td style="vertical-align:top;">:</td><td><div>/SlugStock/appadmin/insert/db/scheduler_task</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SCRIPT_NAME</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_NAME</td><td style="vertical-align:top;">:</td><td><div>slugstock.pythonanywhere.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PORT</td><td style="vertical-align:top;">:</td><td><div>443</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PROTOCOL</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;/home/SlugStock/web2py/applications/welcome/&#x27;, &#x27;/home/SlugStock/web2py/applications/SlugStock/&#x27;, &#x27;/home/SlugStock/web2py/applications/admin/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>/home/SlugStock/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">content_length</td><td style="vertical-align:top;">:</td><td><div>2565</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">content_type</td><td style="vertical-align:top;">:</td><td><div>multipart/form-data; boundary=---------------------------205551471428026</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">document_root</td><td style="vertical-align:top;">:</td><td><div>/usr/local/openresty/nginx/html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>/home/SlugStock/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept</td><td style="vertical-align:top;">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_encoding</td><td style="vertical-align:top;">:</td><td><div>gzip, deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_language</td><td style="vertical-align:top;">:</td><td><div>en-US,en;q=0.5</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_connection</td><td style="vertical-align:top;">:</td><td><div>close</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_content_length</td><td style="vertical-align:top;">:</td><td><div>2565</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_content_type</td><td style="vertical-align:top;">:</td><td><div>multipart/form-data; boundary=---------------------------205551471428026</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_cookie</td><td style="vertical-align:top;">:</td><td><div>_ga=GA1.2.1168300973.1452644018; session_id_welcome=169.233.207.252-57ea73d9-c7b3-48d8-962c-13cacc2e59cf; session_id_admin=169.233.207.252-2354f146-e352-4a71-abb2-c1b26d283e4a; session_id_slugstock=169.233.207.252-9ca37525-a3db-44d3-8f15-35612ea2e0b6; session_id_slugstockcurrent=169.233.207.252-4b789e59-aae6-4cf1-a67b-afb7173a51f5; _gat=1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_host</td><td style="vertical-align:top;">:</td><td><div>slugstock.pythonanywhere.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_referer</td><td style="vertical-align:top;">:</td><td><div>https://slugstock.pythonanywhere.com/SlugStock/appadmin/insert/db/scheduler_task</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_user_agent</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (Windows NT 6.3; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_x_forwarded_for</td><td style="vertical-align:top;">:</td><td><div>169.233.207.252</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_x_real_ip</td><td style="vertical-align:top;">:</td><td><div>169.233.207.252</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">https</td><td style="vertical-align:top;">:</td><td><div>on</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>slugstock.pythonanywhere.com</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>giles-liveweb4</div></td></tr><tr><td><div>50.19.109.98</div></td></tr><tr><td><div>127.0.0.1</div></td></tr><tr><td><div>localhost</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path_info</td><td style="vertical-align:top;">:</td><td><div>/SlugStock/appadmin/insert/db/scheduler_task</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">query_string</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_addr</td><td style="vertical-align:top;">:</td><td><div>10.169.229.133</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_port</td><td style="vertical-align:top;">:</td><td><div>50473</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_method</td><td style="vertical-align:top;">:</td><td><div>POST</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_uri</td><td style="vertical-align:top;">:</td><td><div>/SlugStock/appadmin/insert/db/scheduler_task</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">script_name</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_name</td><td style="vertical-align:top;">:</td><td><div>slugstock.pythonanywhere.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_port</td><td style="vertical-align:top;">:</td><td><div>443</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_protocol</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi.node</td><td style="vertical-align:top;">:</td><td><div>giles-liveweb4</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi.version</td><td style="vertical-align:top;">:</td><td><div>2.0.5.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi_node</td><td style="vertical-align:top;">:</td><td><div>giles-liveweb4</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi_version</td><td style="vertical-align:top;">:</td><td><div>2.0.5.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_path</td><td style="vertical-align:top;">:</td><td><div>/home/SlugStock/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.12.3-stable+timestamp.2015.08.19.00.18.03</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.errors</td><td style="vertical-align:top;">:</td><td><div>&lt;uwsgi_file__bin_user_wsgi_wrapper.ErrorLogFile object at 0x7f62b0cd4090&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;built-in function uwsgi_sendfile&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.input</td><td style="vertical-align:top;">:</td><td><div>&lt;uwsgi._Input object at 0x7f62bb041c78&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multiprocess</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multithread</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.url_scheme</td><td style="vertical-align:top;">:</td><td><div>https</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_errors</td><td style="vertical-align:top;">:</td><td><div>&lt;uwsgi_file__bin_user_wsgi_wrapper.ErrorLogFile object at 0x7f62b0cd4090&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;built-in function uwsgi_sendfile&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_input</td><td style="vertical-align:top;">:</td><td><div>&lt;uwsgi._Input object at 0x7f62bb041c78&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multiprocess</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multithread</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_url_scheme</td><td style="vertical-align:top;">:</td><td><div>https</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">extension</td><td style="vertical-align:top;">:</td><td><div>html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">folder</td><td style="vertical-align:top;">:</td><td><div>/home/SlugStock/web2py/applications/SlugStock/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">function</td><td style="vertical-align:top;">:</td><td><div>insert</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">global_settings</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;/home/SlugStock/web2py/applications/welcome/&#x27;, &#x27;/home/SlugStock/web2py/applications/SlugStock/&#x27;, &#x27;/home/SlugStock/web2py/applications/admin/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>/home/SlugStock/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>/home/SlugStock/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>slugstock.pythonanywhere.com</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>giles-liveweb4</div></td></tr><tr><td><div>50.19.109.98</div></td></tr><tr><td><div>127.0.0.1</div></td></tr><tr><td><div>localhost</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.12.3-stable+timestamp.2015.08.19.00.18.03</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_https</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_local</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_restful</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_sheduler</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_shell</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">now</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2016, 2, 8, 21, 26, 43, 311002)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_args</td><td style="vertical-align:top;">:</td><td><div>db/scheduler_task</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_extension</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">url</td><td style="vertical-align:top;">:</td><td><div>/SlugStock/appadmin/insert/db/scheduler_task</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">utcnow</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2016, 2, 8, 21, 26, 43, 311020)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi</td><td style="vertical-align:top;">:</td><td><div>&lt;gluon.main.LazyWSGI object at 0x7f62968b6c50&gt;</div></td></tr></table></div>'
tRp58
sS'frames'
p59
(lp60
(dp61
S'file'
p62
S'/home/SlugStock/web2py/gluon/restricted.py'
p63
sS'dump'
p64
(dp65
S'environment'
p66
S"{'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ASSIGNJS': <function ASSIGNJS>, 'AppConfig': <function AppConfig>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, ...}"
p67
sS'ccode'
p68
S'<code object <module> at 0x7f62969395b0, file "/...tions/SlugStock/controllers/appadmin.py", line 7>'
p69
ssS'lnum'
p70
I227
sS'lines'
p71
(dp72
I224
S'            ccode = code'
p73
sI225
S'        else:'
p74
sI226
S'            ccode = compile2(code, layer)'
p75
sI227
S'        exec ccode in environment'
p76
sI228
S'    except HTTP:'
p77
sI229
S'        raise'
p78
sI230
S'    except RestrictedError:'
p79
sI231
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p80
sI222
S'    try:'
p81
sI223
S'        if isinstance(code, types.CodeType):'
p82
ssS'call'
p83
S"(code='# -*- coding: utf-8 -*-\\n\\n# #####################...ul_main\\n\\nresponse._vars=response._caller(insert)\\n', environment={'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ASSIGNJS': <function ASSIGNJS>, 'AppConfig': <function AppConfig>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, ...}, layer='/home/SlugStock/web2py/applications/SlugStock/controllers/appadmin.py')"
p84
sS'func'
p85
S'restricted'
p86
sa(dp87
g62
S'/home/SlugStock/web2py/applications/SlugStock/controllers/appadmin.py'
p88
sg64
(dp89
sg70
I703
sg71
(dp90
I692
S'    # Render'
p91
sI693
S"    ul_main = UL(_class='nav nav-list')"
p92
sI694
S'    for t in tables:'
p93
sI695
S'        ul_main.append(A(t[\'name\'], _onclick="collapse(\'a_%s\')" % t[\'slug\']))'
p94
sI696
S'        ul_t = UL(_class=\'nav nav-list\', _id="a_%s" % t[\'slug\'], _style=\'display:none\')'
p95
sI697
S"        for op in t['method_hooks']:"
p96
sI698
S"            ul_t.append(LI (op['name']))"
p97
sI699
S'            ul_t.append(UL([LI(A(f[\'funcname\'], _class="editor_filelink", _href=f[\'url\']if \'url\' in f else None, **{\'_data-lineno\':f[\'lineno\']-1})) for f in op[\'functions\']]))'
p98
sI700
S'        ul_main.append(ul_t)'
p99
sI701
S'    return ul_main'
p100
ssg83
S'()'
p101
sg85
S'<module>'
p102
sa(dp103
g62
S'/home/SlugStock/web2py/gluon/globals.py'
p104
sg64
(dp105
S'self'
p106
S'undefined'
p107
sS'f'
S'<function insert>'
p108
ssg70
I412
sg71
(dp109
I416
S"        self.generic_patterns = ['*']"
p110
sI407
S"        self.flash = ''            # used by the default view layout"
p111
sI408
S'        self.meta = Storage()      # used by web2py_ajax.html'
p112
sI409
S'        self.menu = []             # used by the default view layout'
p113
sI410
S'        self.files = []            # used by web2py_ajax.html'
p114
sI411
S'        self._vars = None'
p115
sI412
S'        self._caller = lambda f: f()'
p116
sI413
S'        self._view_environment = None'
p117
sI414
S'        self._custom_commit = None'
p118
sI415
S'        self._custom_rollback = None'
p119
ssg83
S'(f=<function insert>)'
p120
sg85
S'<lambda>'
p121
sa(dp122
g62
S'/home/SlugStock/web2py/applications/SlugStock/controllers/appadmin.py'
p123
sg64
(dp124
S'global request'
p125
S"<Storage {'_vars': <Storage {'vars': '{}', 'peri.../home/SlugStock/web2py/applications/SlugStock/'}>"
p126
sS'request.vars'
p127
S"<Storage {'vars': '{}', 'period': '60', 'group_n...in', 'repeats': '0', 'assigned_worker_name': ''}>"
p128
sS'global session'
p129
S"<Storage {'flash': None, 'last_orderby': None, '...-8dcf-473d-82b5-8928fb201cd5'], '_secure': True}>"
p130
sS'form'
p131
S'<gluon.sqlhtml.SQLFORM object>'
p132
sS'form.accepts'
p133
S'<bound method SQLFORM.accepts of <gluon.sqlhtml.SQLFORM object>>'
p134
ssg70
I151
sg71
(dp135
I146
S''
sI147
S''
sI148
S'def insert():'
p136
sI149
S'    (db, table) = get_table(request)'
p137
sI150
S'    form = SQLFORM(db[table], ignore_rw=ignore_rw)'
p138
sI151
S'    if form.accepts(request.vars, session):'
p139
sI152
S"        response.flash = T('new record inserted')"
p140
sI153
S'    return dict(form=form, table=db[table])'
p141
sI154
S''
sI155
S''
ssg83
S'()'
p142
sg85
S'insert'
p143
sa(dp144
g62
S'/home/SlugStock/web2py/gluon/sqlhtml.py'
p145
sg64
(dp146
S'kwargs'
p147
g45
ssg70
I1495
sg71
(dp148
I1490
S'            session,'
p149
sI1491
S'            formname,'
p150
sI1492
S'            keepvalues,'
p151
sI1493
S'            onvalidation,'
p152
sI1494
S'            hideerror=hideerror,'
p153
sI1495
S'            **kwargs'
p154
sI1496
S'        )'
p155
sI1497
S''
sI1498
S'        self.deleted = \\'
p156
sI1499
S'            request_vars.get(self.FIELDNAME_REQUEST_DELETE, False)'
p157
ssg83
S"(self=<gluon.sqlhtml.SQLFORM object>, request_vars=<Storage {'vars': '{}', 'period': '60', 'group_n...in', 'repeats': '0', 'assigned_worker_name': ''}>, session=<Storage {'flash': None, 'last_orderby': None, '...-8dcf-473d-82b5-8928fb201cd5'], '_secure': True}>, formname='scheduler_task/create', keepvalues=False, onvalidation=None, dbio=True, hideerror=False, detect_record_change=False, **kwargs={})"
p158
sg85
S'accepts'
p159
sa(dp160
g62
S'/home/SlugStock/web2py/gluon/html.py'
p161
sg64
(dp162
S'status'
p163
S'True'
p164
sS'self'
p165
S'<gluon.sqlhtml.SQLFORM object>'
p166
sS'self._traverse'
p167
S'<bound method SQLFORM._traverse of <gluon.sqlhtml.SQLFORM object>>'
p168
sS'hideerror'
p169
S'False'
p170
ssg70
I2119
sg71
(dp171
I2114
S'        if status and session:'
p172
sI2115
S'            # check if editing a record that has been modified by the server'
p173
sI2116
S"            if hasattr(self, 'record_hash') and self.record_hash != formkey.split(':')[0]:"
p174
sI2117
S'                status = False'
p175
sI2118
S'                self.record_changed = changed = True'
p176
sI2119
S'        status = self._traverse(status, hideerror)'
p177
sI2120
S'        status = self.assert_status(status, request_vars)'
p178
sI2121
S'        if onvalidation:'
p179
sI2122
S'            if isinstance(onvalidation, dict):'
p180
sI2123
S"                onsuccess = onvalidation.get('onsuccess', None)"
p181
ssg83
S"(self=<gluon.sqlhtml.SQLFORM object>, request_vars=<Storage {'status': 'QUEUED', 'timeout': '60', '...r_task/create', 'function_name': 'updatePrices'}>, session=<Storage {'flash': None, 'last_orderby': None, '...-8dcf-473d-82b5-8928fb201cd5'], '_secure': True}>, formname='scheduler_task/create', keepvalues=False, onvalidation=None, hideerror=False, **kwargs={})"
p182
sg85
g159
sa(dp183
g62
S'/home/SlugStock/web2py/gluon/html.py'
p184
sg64
(dp185
S'status'
p186
g164
sS'newstatus'
p187
g164
sS'c'
S'<gluon.html.TABLE object>'
p188
sS'hideerror'
p189
g170
sS'c._traverse'
p190
S'<bound method TABLE._traverse of <gluon.html.TABLE object>>'
p191
ssg70
I885
sg71
(dp192
I880
S'                c.latest = self.latest'
p193
sI881
S'                c.session = self.session'
p194
sI882
S'                c.formname = self.formname'
p195
sI883
S"                if not c.attributes.get('hideerror'):"
p196
sI884
S"                    c['hideerror'] = hideerror or self.attributes.get('hideerror')"
p197
sI885
S'                newstatus = c._traverse(status, hideerror) and newstatus'
p198
sI886
S''
sI887
S'        # for input, textarea, select, option'
p199
sI888
S"        # deal with 'value' and 'validation'"
p200
sI889
S''
ssg83
S'(self=<gluon.sqlhtml.SQLFORM object>, status=True, hideerror=False)'
p201
sg85
S'_traverse'
p202
sa(dp203
g62
S'/home/SlugStock/web2py/gluon/html.py'
p204
sg64
(dp205
S'status'
p206
g164
sS'newstatus'
p207
g164
sS'c'
S'<gluon.html.TR object>'
p208
sS'hideerror'
p209
g170
sS'c._traverse'
p210
S'<bound method TR._traverse of <gluon.html.TR object>>'
p211
ssg70
I885
sg71
(dp212
I880
S'                c.latest = self.latest'
p213
sI881
S'                c.session = self.session'
p214
sI882
S'                c.formname = self.formname'
p215
sI883
S"                if not c.attributes.get('hideerror'):"
p216
sI884
S"                    c['hideerror'] = hideerror or self.attributes.get('hideerror')"
p217
sI885
S'                newstatus = c._traverse(status, hideerror) and newstatus'
p218
sI886
S''
sI887
S'        # for input, textarea, select, option'
p219
sI888
S"        # deal with 'value' and 'validation'"
p220
sI889
S''
ssg83
S'(self=<gluon.html.TABLE object>, status=True, hideerror=False)'
p221
sg85
g202
sa(dp222
g62
S'/home/SlugStock/web2py/gluon/html.py'
p223
sg64
(dp224
S'status'
p225
g164
sS'newstatus'
p226
g164
sS'c'
S'<gluon.html.TD object>'
p227
sS'hideerror'
p228
g170
sS'c._traverse'
p229
S'<bound method TD._traverse of <gluon.html.TD object>>'
p230
ssg70
I885
sg71
(dp231
I880
S'                c.latest = self.latest'
p232
sI881
S'                c.session = self.session'
p233
sI882
S'                c.formname = self.formname'
p234
sI883
S"                if not c.attributes.get('hideerror'):"
p235
sI884
S"                    c['hideerror'] = hideerror or self.attributes.get('hideerror')"
p236
sI885
S'                newstatus = c._traverse(status, hideerror) and newstatus'
p237
sI886
S''
sI887
S'        # for input, textarea, select, option'
p238
sI888
S"        # deal with 'value' and 'validation'"
p239
sI889
S''
ssg83
S'(self=<gluon.html.TR object>, status=True, hideerror=False)'
p240
sg85
g202
sa(dp241
g62
S'/home/SlugStock/web2py/gluon/html.py'
p242
sg64
(dp243
S'status'
p244
g164
sS'newstatus'
p245
g164
sS'c'
S'<gluon.html.INPUT object>'
p246
sS'hideerror'
p247
g170
sS'c._traverse'
p248
S'<bound method INPUT._traverse of <gluon.html.INPUT object>>'
p249
ssg70
I885
sg71
(dp250
I880
S'                c.latest = self.latest'
p251
sI881
S'                c.session = self.session'
p252
sI882
S'                c.formname = self.formname'
p253
sI883
S"                if not c.attributes.get('hideerror'):"
p254
sI884
S"                    c['hideerror'] = hideerror or self.attributes.get('hideerror')"
p255
sI885
S'                newstatus = c._traverse(status, hideerror) and newstatus'
p256
sI886
S''
sI887
S'        # for input, textarea, select, option'
p257
sI888
S"        # deal with 'value' and 'validation'"
p258
sI889
S''
ssg83
S'(self=<gluon.html.TD object>, status=True, hideerror=False)'
p259
sg85
g202
sa(dp260
g62
S'/home/SlugStock/web2py/gluon/html.py'
p261
sg64
(dp262
S'newstatus'
p263
g164
sS'self'
p264
S'<gluon.html.INPUT object>'
p265
sS'self._validate'
p266
S'<bound method INPUT._validate of <gluon.html.INPUT object>>'
p267
ssg70
I892
sg71
(dp268
I896
S'            self._postprocessing()'
p269
sI887
S'        # for input, textarea, select, option'
p270
sI888
S"        # deal with 'value' and 'validation'"
p271
sI889
S''
sI890
S"        name = self['_name']"
p272
sI891
S'        if newstatus:'
p273
sI892
S'            newstatus = self._validate()'
p274
sI893
S'            self._postprocessing()'
p275
sI894
S"        elif 'old_value' in self.attributes:"
p276
sI895
S"            self['value'] = self['old_value']"
p277
ssg83
S'(self=<gluon.html.INPUT object>, status=True, hideerror=False)'
p278
sg85
g202
sa(dp279
g62
S'/home/SlugStock/web2py/gluon/html.py'
p280
sg64
(dp281
S'builtinException'
p282
S"<type 'exceptions.Exception'>"
p283
sS'msg'
p284
S"'Validation error, field:uuid <gluon.validators.IS_NOT_IN_DB object at 0x7f62968d0ad0>'"
p285
ssg70
I1860
sg71
(dp286
I1856
S'                try:'
p287
sI1857
S'                    (value, errors) = validator(value)'
p288
sI1858
S'                except:'
p289
sI1859
S'                    msg = "Validation error, field:%s %s" % (name,validator)'
p290
sI1860
S'                    raise Exception(msg)'
p291
sI1861
S'                if not errors is None:'
p292
sI1862
S'                    self.vars[name] = value'
p293
sI1863
S'                    self.errors[name] = errors'
p294
sI1864
S'                    break'
p295
sI1855
S'            for k, validator in enumerate(requires):'
p296
ssg83
S'(self=<gluon.html.INPUT object>)'
p297
sg85
S'_validate'
p298
sasS'pyver'
p299
S'Python 2.7.6: /usr/local/bin/uwsgi (prefix: /usr)'
p300
sS'session'
p301
g57
(S's\xc2\x01\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">flash</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">last_orderby</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">last_query</td><td style="vertical-align:top;">:</td><td><div>db.auth_membership.id&gt;0</div></td></tr></table></div>'
tRp302
sS'etype'
p303
S"<type 'exceptions.Exception'>"
p304
sS'date'
p305
S'Mon Feb  8 21:26:43 2016'
p306
sS'response'
p307
g57
(S's\xc4\x1f\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">body</td><td style="vertical-align:top;">:</td><td><div>&lt;cStringIO.StringO object at 0x7f629691e260&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_slugstock</td><td style="vertical-align:top;">:</td><td><div>169.233.207.252-9ca37525-a3db-44d3-8f15-35612ea2e0b6<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div>/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">delimiters</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>{{</div></td></tr><tr><td><div>}}</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">files</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">flash</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">form_label_separator</td><td style="vertical-align:top;">:</td><td><div>: </div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">formstyle</td><td style="vertical-align:top;">:</td><td><div>table3cols</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generic_patterns</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>*</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">google_analytics_id</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">headers</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">X-Powered-By</td><td style="vertical-align:top;">:</td><td><div>web2py</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">logo</td><td style="vertical-align:top;">:</td><td><div><a class="navbar-brand" href="http://www.web2py.com/" id="web2py-logo"><b>web<span>2</span>py</b>&trade;&nbsp;</a></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">menu</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div><table><tr><td><div>design</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/design/SlugStock</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>db</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/SlugStock/appadmin/index</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>state</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/SlugStock/appadmin/state</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>cache</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/SlugStock/appadmin/ccache</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">meta</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">author</td><td style="vertical-align:top;">:</td><td><div>Your Name &lt;you@example.com&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">description</td><td style="vertical-align:top;">:</td><td><div>a cool new app</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generator</td><td style="vertical-align:top;">:</td><td><div>Web2py Web Framework</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">keywords</td><td style="vertical-align:top;">:</td><td><div>web2py, python, framework</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">models_to_run</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>^\\w+\\.py$</div></td></tr><tr><td><div>^appadmin/\\w+\\.py$</div></td></tr><tr><td><div>^appadmin/insert/\\w+\\.py$</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">postprocessing</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_client</td><td style="vertical-align:top;">:</td><td><div>169.233.207.252</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_compression_level</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_expires</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_key</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_data_name</td><td style="vertical-align:top;">:</td><td><div>session_data_slugstock</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_file</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;/home/SlugStock/web2py/applications/SlugStock/sessions/092/15a/169.233.207.252-9ca37525-a3db-44d3-8f15-35612ea2e0b6&#x27;, mode &#x27;rb+&#x27; at 0x7f6296ad9ae0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_filename</td><td style="vertical-align:top;">:</td><td><div>/home/SlugStock/web2py/applications/SlugStock/sessions/169.233.207.252-9ca37525-a3db-44d3-8f15-35612ea2e0b6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_hash</td><td style="vertical-align:top;">:</td><td><div>c9b86f8fd4c87c7ec79d477d4b2a751e</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id</td><td style="vertical-align:top;">:</td><td><div>169.233.207.252-9ca37525-a3db-44d3-8f15-35612ea2e0b6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_name</td><td style="vertical-align:top;">:</td><td><div>session_id_slugstock</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_locked</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_masterapp</td><td style="vertical-align:top;">:</td><td><div>SlugStock</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_new</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_storage_type</td><td style="vertical-align:top;">:</td><td><div>file</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">status</td><td style="vertical-align:top;">:</td><td><div>200</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">subtitle</td><td style="vertical-align:top;">:</td><td><div>Database Administration (appadmin)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">title</td><td style="vertical-align:top;">:</td><td><div>Slugstock</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">view</td><td style="vertical-align:top;">:</td><td><div>appadmin.html</div></td></tr></table></div>'
tRp308
sS'locals'
p309
(dp310
S'name'
p311
S"'uuid'"
p312
sS'k'
S'0'
sS'value'
p313
S"'58b99337-4865-4a90-b781-dc707bc65c26'"
p314
sS'validator'
p315
S'<gluon.validators.IS_NOT_IN_DB object>'
p316
sS'msg'
p317
S"'Validation error, field:uuid <gluon.validators.IS_NOT_IN_DB object at 0x7f62968d0ad0>'"
p318
sS'request_vars_get'
p319
S'<built-in method get of Storage object>'
p320
sS'requires'
p321
S'[<gluon.validators.IS_NOT_IN_DB object>]'
p322
sS'self'
p323
S'<gluon.html.INPUT object>'
p324
sssS'traceback'
p325
S'Traceback (most recent call last):\n  File "/home/SlugStock/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/SlugStock/web2py/applications/SlugStock/controllers/appadmin.py", line 703, in <module>\n  File "/home/SlugStock/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/SlugStock/web2py/applications/SlugStock/controllers/appadmin.py", line 151, in insert\n    if form.accepts(request.vars, session):\n  File "/home/SlugStock/web2py/gluon/sqlhtml.py", line 1495, in accepts\n    **kwargs\n  File "/home/SlugStock/web2py/gluon/html.py", line 2119, in accepts\n    status = self._traverse(status, hideerror)\n  File "/home/SlugStock/web2py/gluon/html.py", line 885, in _traverse\n    newstatus = c._traverse(status, hideerror) and newstatus\n  File "/home/SlugStock/web2py/gluon/html.py", line 885, in _traverse\n    newstatus = c._traverse(status, hideerror) and newstatus\n  File "/home/SlugStock/web2py/gluon/html.py", line 885, in _traverse\n    newstatus = c._traverse(status, hideerror) and newstatus\n  File "/home/SlugStock/web2py/gluon/html.py", line 885, in _traverse\n    newstatus = c._traverse(status, hideerror) and newstatus\n  File "/home/SlugStock/web2py/gluon/html.py", line 892, in _traverse\n    newstatus = self._validate()\n  File "/home/SlugStock/web2py/gluon/html.py", line 1860, in _validate\n    raise Exception(msg)\nException: Validation error, field:uuid <gluon.validators.IS_NOT_IN_DB object at 0x7f62968d0ad0>\n'
p326
s.